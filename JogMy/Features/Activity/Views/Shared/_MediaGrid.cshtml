@model List<JogMy.Features.Activity.ViewModels.ActivityMediaViewModel>

@if (Model != null && Model.Any())
{
    <div class="media-grid-container" data-media-count="@Model.Count">
        @if (Model.Count == 1)
        {
            <!-- Single media item -->
            var media = Model.First();
            <div class="media-item single-media">
                @if (media.MediaType == JogMy.Models.MediaType.Image)
                {
                    <img src="@media.FilePath" alt="Activity Photo" class="media-content" onclick="openGalleryAt(0)" />
                }
                else
                {
                    <video class="media-content" controls onclick="openGalleryAt(0)">
                        <source src="@media.FilePath" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                }
            </div>
        }
        else if (Model.Count == 2)
        {
            <!-- Two media items side by side -->
            <div class="media-grid grid-2">
                @for (int i = 0; i < Model.Count; i++)
                {
                    var media = Model[i];
                    <div class="media-item" data-index="@media.OrderIndex">
                        @if (media.MediaType == JogMy.Models.MediaType.Image)
                        {
                            <img src="@media.FilePath" alt="Activity Photo" class="media-content" onclick="openGalleryAt(@i)" />
                        }
                        else
                        {
                            <video class="media-content" controls onclick="openGalleryAt(@i)">
                                <source src="@media.FilePath" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                        }
                    </div>
                }
            </div>
        }
        else if (Model.Count == 3)
        {
            <!-- Three media items: 1 large + 2 stacked -->
            <div class="media-grid grid-3">
                <div class="media-item large" data-index="@Model[0].OrderIndex">
                    @if (Model[0].MediaType == JogMy.Models.MediaType.Image)
                    {
                        <img src="@Model[0].FilePath" alt="Activity Photo" class="media-content" onclick="openGalleryAt(0)" />
                    }
                    else
                    {
                        <video class="media-content" controls onclick="openGalleryAt(0)">
                            <source src="@Model[0].FilePath" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    }
                </div>
                <div class="media-stack">
                    @for (int i = 1; i < Model.Count; i++)
                    {
                        var media = Model[i];
                        <div class="media-item small" data-index="@media.OrderIndex">
                            @if (media.MediaType == JogMy.Models.MediaType.Image)
                            {
                                <img src="@media.FilePath" alt="Activity Photo" class="media-content" onclick="openGalleryAt(@i)" />
                            }
                            else
                            {
                                <video class="media-content" controls onclick="openGalleryAt(@i)">
                                    <source src="@media.FilePath" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            }
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <!-- Four or more media items: 1 large + 2 medium + dots overlay -->
            <div class="media-grid grid-4-plus">
                <div class="media-item large" data-index="@Model[0].OrderIndex">
                    @if (Model[0].MediaType == JogMy.Models.MediaType.Image)
                    {
                        <img src="@Model[0].FilePath" alt="Activity Photo" class="media-content" onclick="openGalleryAt(0)" />
                    }
                    else
                    {
                        <video class="media-content" onclick="openGalleryAt(0)">
                            <source src="@Model[0].FilePath" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    }
                </div>
                <div class="media-stack">
                    @for (int i = 1; i < Math.Min(3, Model.Count); i++)
                    {
                        var media = Model[i];
                        <div class="media-item small @(i == 2 && Model.Count > 2 ? "has-dots-overlay" : "")" data-index="@media.OrderIndex">
                            @if (media.MediaType == JogMy.Models.MediaType.Image)
                            {
                                <img src="@media.FilePath" alt="Activity Photo" class="media-content" onclick="openGalleryAt(@i)" />
                            }
                            else
                            {
                                <video class="media-content" onclick="openGalleryAt(@i)">
                                    <source src="@media.FilePath" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            }
                            @if (i == 2 && Model.Count > 2)
                            {
                                <div class="facebook-dots-overlay" onclick="openGalleryAt(2)">
                                    <div class="dots-icon">
                                        <span class="dot"></span>
                                        <span class="dot"></span>
                                        <span class="dot"></span>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}

<style>
.media-grid-container {
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    background: #f8f9fa;
}

.media-grid {
    display: flex;
    gap: 4px;
}

.grid-2 {
    height: 300px;
}

.grid-2 .media-item {
    flex: 1;
}

.grid-3 {
    height: 300px;
}

.grid-3 .media-item.large {
    flex: 2;
}

.grid-3 .media-stack {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.grid-3 .media-stack .media-item {
    flex: 1;
}

.grid-4-plus {
    height: 300px;
}

.grid-4-plus .media-item.large {
    flex: 2;
}

.grid-4-plus .media-stack {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.grid-4-plus .media-stack .media-item {
    flex: 1;
}

.single-media {
    height: 400px;
}

.media-item {
    position: relative;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.2s ease;
}

.media-item:hover {
    transform: scale(1.02);
}

.media-item.has-overlay {
    position: relative;
}

.media-content {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
}

.facebook-dots-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.facebook-dots-overlay:hover {
    background: rgba(0, 0, 0, 0.6);
}

.dots-icon {
    display: flex;
    gap: 4px;
}

.dots-icon .dot {
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: white;
    opacity: 0.9;
}

.has-dots-overlay {
    position: relative;
}


/* Responsive Design */
@@media (max-width: 768px) {
    .grid-2, .grid-3, .grid-4-plus {
        height: 250px;
    }
    
    .single-media {
        height: 300px;
    }
    
    .dots-icon .dot {
        width: 5px;
        height: 5px;
    }
}
</style>

<script>
let currentGalleryIndex = 0;
let galleryMediaItems = [];

function openGalleryAt(startIndex) {
    // Get all media items from the current post
    const mediaContainer = event.target.closest('.media-grid-container');
    const mediaData = @Html.Raw(Json.Serialize(Model));
    
    galleryMediaItems = mediaData;
    currentGalleryIndex = startIndex;
    
    showGalleryModal();
}

function showGalleryModal() {
    const currentMedia = galleryMediaItems[currentGalleryIndex];
    const isVideo = currentMedia.mediaType === 1; // MediaType.Video = 1
    
    const modal = document.createElement('div');
    modal.className = 'facebook-gallery-modal';
    modal.innerHTML = `
        <div class="gallery-backdrop" onclick="closeGalleryModal()"></div>
        <div class="gallery-container">
            <!-- Close button -->
            <button class="gallery-close-btn" onclick="closeGalleryModal()">
                <i class="bi bi-x-lg"></i>
            </button>
            
            <!-- Navigation arrows -->
            ${galleryMediaItems.length > 1 ? `
                <button class="gallery-nav-btn gallery-prev" onclick="navigateGallery(-1)" ${currentGalleryIndex === 0 ? 'style="opacity: 0.3;"' : ''}>
                    <i class="bi bi-chevron-left"></i>
                </button>
                <button class="gallery-nav-btn gallery-next" onclick="navigateGallery(1)" ${currentGalleryIndex === galleryMediaItems.length - 1 ? 'style="opacity: 0.3;"' : ''}>
                    <i class="bi bi-chevron-right"></i>
                </button>
            ` : ''}
            
            <!-- Media content -->
            <div class="gallery-media-container">
                ${isVideo 
                    ? `<video src="${currentMedia.filePath}" controls autoplay class="gallery-media"></video>` 
                    : `<img src="${currentMedia.filePath}" alt="Gallery image" class="gallery-media">`
                }
            </div>
            
            <!-- Counter -->
            ${galleryMediaItems.length > 1 ? `
                <div class="gallery-counter">
                    ${currentGalleryIndex + 1} of ${galleryMediaItems.length}
                </div>
            ` : ''}
        </div>
    `;
    
    document.body.appendChild(modal);
    document.body.style.overflow = 'hidden';
    
    // Add keyboard navigation
    document.addEventListener('keydown', handleGalleryKeydown);
}

function navigateGallery(direction) {
    const newIndex = currentGalleryIndex + direction;
    
    if (newIndex >= 0 && newIndex < galleryMediaItems.length) {
        currentGalleryIndex = newIndex;
        updateGalleryContent();
    }
}

function updateGalleryContent() {
    const modal = document.querySelector('.facebook-gallery-modal');
    if (!modal) return;
    
    const currentMedia = galleryMediaItems[currentGalleryIndex];
    const isVideo = currentMedia.mediaType === 1;
    
    // Update media content
    const mediaContainer = modal.querySelector('.gallery-media-container');
    mediaContainer.innerHTML = isVideo 
        ? `<video src="${currentMedia.filePath}" controls autoplay class="gallery-media"></video>` 
        : `<img src="${currentMedia.filePath}" alt="Gallery image" class="gallery-media">`;
    
    // Update counter
    const counter = modal.querySelector('.gallery-counter');
    if (counter) {
        counter.textContent = `${currentGalleryIndex + 1} of ${galleryMediaItems.length}`;
    }
    
    // Update navigation button states
    const prevBtn = modal.querySelector('.gallery-prev');
    const nextBtn = modal.querySelector('.gallery-next');
    
    if (prevBtn) {
        prevBtn.style.opacity = currentGalleryIndex === 0 ? '0.3' : '1';
    }
    if (nextBtn) {
        nextBtn.style.opacity = currentGalleryIndex === galleryMediaItems.length - 1 ? '0.3' : '1';
    }
}

function closeGalleryModal() {
    const modal = document.querySelector('.facebook-gallery-modal');
    if (modal) {
        document.body.removeChild(modal);
        document.body.style.overflow = 'auto';
        document.removeEventListener('keydown', handleGalleryKeydown);
    }
}

function handleGalleryKeydown(event) {
    switch(event.key) {
        case 'ArrowLeft':
            navigateGallery(-1);
            break;
        case 'ArrowRight':
            navigateGallery(1);
            break;
        case 'Escape':
            closeGalleryModal();
            break;
    }
}
</script>

<style>
/* Facebook-style Gallery Modal */
.facebook-gallery-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
    animation: fadeIn 0.2s ease-out;
}

.gallery-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.95);
    cursor: pointer;
}

.gallery-container {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    z-index: 10001;
}

.gallery-close-btn {
    position: absolute;
    top: 20px;
    right: 20px;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 12px;
    border-radius: 50%;
    width: 44px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    z-index: 10002;
}

.gallery-close-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: scale(1.1);
}

.gallery-nav-btn {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: white;
    font-size: 32px;
    cursor: pointer;
    padding: 16px;
    border-radius: 50%;
    width: 64px;
    height: 64px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    z-index: 10002;
}

.gallery-nav-btn:hover {
    background: rgba(255, 255, 255, 0.2);
    transform: translateY(-50%) scale(1.1);
}

.gallery-nav-btn:disabled {
    opacity: 0.3;
    cursor: not-allowed;
}

.gallery-prev {
    left: 40px;
}

.gallery-next {
    right: 40px;
}

.gallery-media-container {
    display: flex;
    align-items: center;
    justify-content: center;
    max-width: 90vw;
    max-height: 90vh;
}

.gallery-media {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
    border-radius: 8px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
}

.gallery-counter {
    position: absolute;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
    z-index: 10002;
}

@@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

/* Mobile Responsive */
@@media (max-width: 768px) {
    .gallery-nav-btn {
        width: 50px;
        height: 50px;
        font-size: 24px;
        padding: 12px;
    }
    
    .gallery-prev {
        left: 20px;
    }
    
    .gallery-next {
        right: 20px;
    }
    
    .gallery-close-btn {
        top: 15px;
        right: 15px;
        width: 40px;
        height: 40px;
        font-size: 20px;
        padding: 10px;
    }
    
    .gallery-counter {
        bottom: 20px;
        font-size: 12px;
        padding: 6px 12px;
    }
    
    .gallery-media-container {
        max-width: 95vw;
        max-height: 85vh;
    }
}

/* Legacy modal styles (kept for backward compatibility) */
.media-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
}

.modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
}

.modal-content {
    position: relative;
    max-width: 90vw;
    max-height: 90vh;
    z-index: 10000;
}

.modal-media {
    max-width: 100%;
    max-height: 100%;
    border-radius: 8px;
}

.close-btn {
    position: absolute;
    top: -40px;
    right: 0;
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 8px;
    border-radius: 50%;
    transition: background-color 0.2s ease;
}

.close-btn:hover {
    background-color: rgba(255, 255, 255, 0.2);
}
</style>