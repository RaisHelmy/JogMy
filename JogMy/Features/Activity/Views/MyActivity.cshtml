@model JogMy.Features.Activity.ViewModels.MyActivityViewModel

@{
    ViewData["Title"] = "My Activity";
}

@section Styles {
    <style>
        .activity-feed {
            max-width: 680px;
            margin: 0 auto;
        }
        
        .post-creator, .activity-post {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            border: 1px solid #ddd;
        }
        
        .post-creator-header {
            padding: 12px 16px;
            border-bottom: 1px solid #e4e6ea;
        }
        
        .post-creator-body {
            padding: 16px;
        }
        
        .post-textarea {
            border: none;
            resize: none;
            font-size: 24px;
            color: #1c1e21;
            background: #f0f2f5;
            border-radius: 20px;
            padding: 8px 12px;
            min-height: 40px;
        }
        
        .post-textarea:focus {
            outline: none;
            box-shadow: none;
            background: #fff;
            border: 1px solid #1877f2;
        }
        
        .activity-details {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 12px;
            margin-top: 12px;
        }
        
        .post-actions {
            display: flex;
            gap: 8px;
            padding: 8px 16px;
            border-top: 1px solid #e4e6ea;
        }
        
        .post-action-btn {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 8px;
            border: none;
            background: none;
            color: #65676b;
            border-radius: 6px;
            transition: background-color 0.2s;
        }
        
        .post-action-btn:hover {
            background: #f0f2f5;
        }
        
        .post-header {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            gap: 8px;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #1877f2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        .post-meta {
            flex: 1;
        }
        
        .post-author {
            font-weight: 600;
            color: #1c1e21;
            text-decoration: none;
        }
        
        .post-time {
            font-size: 13px;
            color: #65676b;
        }
        
        .privacy-badge {
            font-size: 11px;
            padding: 2px 6px;
            border-radius: 4px;
            background: #e4e6ea;
            color: #65676b;
            margin-left: 4px;
        }
        
        .post-content {
            padding: 0 16px 12px;
            color: #1c1e21;
            line-height: 1.3;
        }
        
        .post-media {
            margin: 12px 0;
        }
        
        .post-image, .post-video {
            width: 100%;
            border-radius: 8px;
        }
        
        .post-stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 16px;
            color: #65676b;
            font-size: 15px;
            border-top: 1px solid #e4e6ea;
        }
        
        .like-btn.liked {
            color: #1877f2;
        }
        
        .comments-section {
            border-top: 1px solid #e4e6ea;
        }
        
        .comment {
            display: flex;
            gap: 8px;
            padding: 8px 16px;
        }
        
        .comment-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #42b883;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
            font-weight: bold;
        }
        
        .comment-content {
            flex: 1;
            background: #f0f2f5;
            border-radius: 16px;
            padding: 8px 12px;
        }
        
        .comment-author {
            font-weight: 600;
            font-size: 13px;
            color: #1c1e21;
        }
        
        .comment-text {
            color: #1c1e21;
            font-size: 14px;
        }
        
        .comment-time {
            font-size: 12px;
            color: #65676b;
            margin-top: 2px;
        }
        
        .comment-form {
            display: flex;
            gap: 8px;
            padding: 8px 16px;
            border-top: 1px solid #e4e6ea;
        }
        
        .comment-input {
            flex: 1;
            border: 1px solid #ccd0d5;
            border-radius: 20px;
            padding: 8px 12px;
            font-size: 14px;
        }
        
        .comment-input:focus {
            outline: none;
            border-color: #1877f2;
        }
        
        .btn-primary-fb {
            background: #1877f2;
            border: none;
            color: white;
            font-weight: 600;
            border-radius: 6px;
            padding: 6px 16px;
        }
        
        .btn-primary-fb:hover {
            background: #166fe5;
        }
        
        .activity-summary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 20px;
        }
        
        .activity-stat {
            text-align: center;
        }
        
        .activity-stat-number {
            font-size: 24px;
            font-weight: bold;
            display: block;
        }
        
        .activity-stat-label {
            font-size: 12px;
            opacity: 0.9;
        }
        
        .file-upload-preview {
            margin-top: 8px;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 6px;
            font-size: 13px;
            color: #65676b;
        }
        
        .recent-posts-header {
            margin: 20px 0 10px 0;
        }
        
        .recent-posts-header h5 {
            color: #1c1e21;
            font-weight: 600;
        }
        
        .empty-state {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            border: 1px solid #ddd;
            margin-top: 20px;
        }
        
        .new-post-highlight {
            animation: highlightPost 3s ease-in-out;
            border: 2px solid #1877f2 !important;
        }
        
        @@keyframes highlightPost {
            0% { 
                background-color: rgba(24, 119, 242, 0.1);
                transform: scale(1.02);
            }
            50% { 
                background-color: rgba(24, 119, 242, 0.05);
            }
            100% { 
                background-color: white;
                transform: scale(1);
            }
        }

        .track-dropdown {
            position: relative;
        }

        .track-dropdown option {
            padding: 8px 12px;
        }

        .track-dropdown:focus {
            border-color: #1877f2;
            box-shadow: 0 0 0 2px rgba(24, 119, 242, 0.2);
        }

        .track-selected {
            background-color: #e3f2fd !important;
            border-color: #1877f2 !important;
        }

        .distance-readonly {
            background-color: #e3f2fd !important;
            border-color: #1877f2 !important;
            color: #1565c0 !important;
            font-weight: 600;
        }

        /* iOS-style Picker Styles */
        .ios-picker-button {
            display: flex;
            align-items: center;
            justify-content: space-between;
            text-align: left;
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 12px 16px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .ios-picker-button:hover {
            border-color: #1877f2;
            box-shadow: 0 0 0 2px rgba(24, 119, 242, 0.1);
        }

        .ios-picker-button:focus {
            outline: none;
            border-color: #1877f2;
            box-shadow: 0 0 0 3px rgba(24, 119, 242, 0.2);
        }

        .ios-picker-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background: rgba(0, 0, 0, 0.4);
            z-index: 1050;
            animation: fadeInUp 0.3s ease-out;
        }

        .ios-picker-container > div:first-child {
            background: white;
            border-radius: 12px 12px 0 0;
            box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.15);
            transform: translateY(0);
            animation: slideUp 0.3s ease-out;
        }

        .ios-picker-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 16px 20px;
            border-bottom: 1px solid #e5e5e7;
            background: #f8f9fa;
            border-radius: 12px 12px 0 0;
        }

        .ios-picker-cancel, .ios-picker-done {
            background: none;
            border: none;
            font-size: 16px;
            font-weight: 400;
            cursor: pointer;
            padding: 8px;
            border-radius: 6px;
            transition: background-color 0.2s;
        }

        .ios-picker-cancel {
            color: #8e8e93;
        }

        .ios-picker-cancel:hover {
            background: #e5e5e7;
        }

        .ios-picker-done {
            color: #007aff;
            font-weight: 600;
        }

        .ios-picker-done:hover {
            background: rgba(0, 122, 255, 0.1);
        }

        .ios-picker-title {
            font-weight: 600;
            font-size: 16px;
            color: #1c1c1e;
        }

        .ios-picker-wheels {
            display: flex;
            height: 220px;
            background: white;
            position: relative;
            overflow: hidden;
        }

        .ios-picker-wheels::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 40px;
            transform: translateY(-50%);
            background: rgba(0, 122, 255, 0.05);
            border-top: 1px solid rgba(0, 122, 255, 0.2);
            border-bottom: 1px solid rgba(0, 122, 255, 0.2);
            pointer-events: none;
            z-index: 10;
        }

        .ios-picker-wheel {
            flex: 1;
            position: relative;
            overflow: hidden;
        }

        .ios-picker-label {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 16px;
            color: #1c1c1e;
            font-weight: 400;
            z-index: 15;
            pointer-events: none;
        }

        .ios-picker-options {
            padding: 90px 0;
            transform: translateY(0px);
            transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
            cursor: grab;
            position: relative;
        }

        .ios-picker-options.dragging {
            transition: none;
            cursor: grabbing;
        }

        .ios-picker-option {
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: #1c1c1e;
            cursor: pointer;
            transition: all 0.2s ease;
            user-select: none;
            position: relative;
        }

        .ios-picker-option:hover {
            background: rgba(0, 122, 255, 0.05);
            border-radius: 8px;
        }

        .ios-picker-option.selected {
            color: #007aff;
            font-weight: 600;
            transform: scale(1.05);
        }

        .ios-picker-option:not(.selected) {
            opacity: 0.4;
        }

        .ios-picker-option.nearby {
            opacity: 0.7;
            transform: scale(1.02);
        }

        /* Scroll indicators for desktop */
        .ios-picker-wheel::after {
            content: '⌃⌄';
            position: absolute;
            right: 5px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 12px;
            color: #8e8e93;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .ios-picker-wheel:hover::after {
            opacity: 1;
        }

        @@media (hover: hover) and (pointer: fine) {
            .ios-picker-wheel::after {
                opacity: 0.5;
            }
        }

        /* Profile Header Styles */
        .profile-header {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            border: 1px solid #ddd;
            overflow: hidden;
            position: relative;
        }

        .profile-cover {
            height: 200px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            position: relative;
        }

        .profile-cover.has-cover-photo {
            background: none;
        }

        .profile-cover-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.2);
            pointer-events: none;
        }

        .cover-edit-button {
            position: absolute;
            bottom: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 6px;
            padding: 10px 16px;
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
            backdrop-filter: blur(4px);
            font-size: 14px;
            font-weight: 600;
            z-index: 10;
            pointer-events: auto;
        }

        .cover-edit-button:hover {
            background: rgba(0, 0, 0, 0.8);
            transform: translateY(-2px);
        }

        .cover-edit-button i {
            font-size: 16px;
        }

        .profile-info-container {
            padding: 20px;
            position: relative;
            margin-top: -80px;
        }

        .profile-picture-section {
            display: flex;
            align-items: flex-end;
            margin-bottom: 20px;
        }

        .profile-picture-wrapper {
            position: relative;
            margin-right: 20px;
        }

        .profile-picture, .profile-picture-placeholder {
            width: 160px;
            height: 160px;
            border-radius: 50%;
            border: 6px solid white;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .profile-picture {
            object-fit: cover;
        }

        .profile-picture-placeholder {
            background: linear-gradient(135deg, #1877f2, #42a5f5);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 48px;
            font-weight: bold;
            color: white;
        }

        .camera-button {
            position: absolute;
            bottom: 10px;
            right: 10px;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #42b883;
            color: white;
            border: 3px solid white;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }

        .camera-button:hover {
            background: #369870;
            transform: scale(1.1);
        }

        .profile-details {
            flex: 1;
            margin-top: 60px;
        }

        .profile-name-section {
            margin-bottom: 15px;
        }

        .profile-name {
            font-size: 32px;
            font-weight: 700;
            color: #1c1c1e;
            margin: 0 0 8px 0;
            line-height: 1.2;
        }

        .profile-bio {
            font-size: 16px;
            color: #65676b;
            margin: 0;
            line-height: 1.4;
            max-width: 600px;
        }

        .profile-info-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
        }

        .profile-info-item {
            display: flex;
            align-items: center;
            color: #65676b;
            font-size: 15px;
            gap: 8px;
        }

        .profile-info-item i {
            color: #1877f2;
            font-size: 16px;
        }

        .profile-actions {
            display: flex;
            gap: 12px;
            margin-top: 20px;
        }

        .profile-actions .btn {
            border-radius: 6px;
            font-weight: 600;
            padding: 8px 16px;
            transition: all 0.2s ease;
        }

        .profile-actions .btn-outline-primary {
            border-color: #1877f2;
            color: #1877f2;
        }

        .profile-actions .btn-outline-primary:hover {
            background: #1877f2;
            color: white;
        }

        .profile-actions .btn-outline-secondary {
            border-color: #42b883;
            color: #42b883;
            text-decoration: none;
        }

        .profile-actions .btn-outline-secondary:hover {
            background: #42b883;
            color: white;
            text-decoration: none;
        }

        /* Profile Modal Styles */
        .profile-modal .modal-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-bottom: none;
        }

        .profile-modal .modal-header .btn-close {
            filter: invert(1);
        }

        .profile-form-group {
            margin-bottom: 20px;
        }

        .profile-form-group label {
            font-weight: 600;
            color: #1c1c1e;
            margin-bottom: 8px;
        }

        .profile-form-group .form-control, .profile-form-group .form-select {
            border-radius: 8px;
            border: 1px solid #ddd;
            padding: 12px;
            transition: border-color 0.2s ease;
        }

        .profile-form-group .form-control:focus, .profile-form-group .form-select:focus {
            border-color: #1877f2;
            box-shadow: 0 0 0 2px rgba(24, 119, 242, 0.1);
        }

        .profile-photo-preview {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #ddd;
            margin-bottom: 15px;
        }

        .cover-photo-preview {
            width: 100%;
            max-width: 600px;
            height: 200px;
            border-radius: 8px;
            object-fit: cover;
            border: 3px solid #ddd;
            margin-bottom: 15px;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .profile-cover {
                height: 150px;
            }

            .profile-info-container {
                margin-top: -60px;
                padding: 15px;
            }

            .profile-picture, .profile-picture-placeholder {
                width: 120px;
                height: 120px;
            }

            .profile-picture-placeholder {
                font-size: 36px;
            }

            .profile-name {
                font-size: 24px;
            }

            .profile-details {
                margin-top: 40px;
            }

            .profile-info-grid {
                flex-direction: column;
                gap: 12px;
            }

            .profile-actions {
                flex-direction: column;
            }
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        @@keyframes slideUp {
            from {
                transform: translateY(100%);
            }
            to {
                transform: translateY(0);
            }
        }

        /* Mobile responsive */
        @@media (max-width: 768px) {
            .ios-picker-container {
                padding: 0;
            }
            
            .ios-picker-header {
                padding: 12px 16px;
            }
            
            .ios-picker-wheels {
                height: 200px;
            }
            
            .ios-picker-option {
                font-size: 18px;
            }
        }
    </style>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-8 mx-auto">
            <!-- Success/Error Messages -->
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="bi bi-check-circle me-2"></i>@TempData["Success"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i>@TempData["Error"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            <div class="activity-feed">
                <!-- Profile Header -->
                <!-- Debug Info: CoverPhotoPath = '@Model.Profile.CoverPhotoPath' -->
                <!-- Debug Info: IsEmpty = @string.IsNullOrEmpty(Model.Profile.CoverPhotoPath) -->
                <div class="profile-header">
                    <div class="profile-cover @(string.IsNullOrEmpty(Model.Profile.CoverPhotoPath) ? "" : "has-cover-photo")" style="@(string.IsNullOrEmpty(Model.Profile.CoverPhotoPath) ? "" : $"background-image: url('{Model.Profile.CoverPhotoPath}'); background-size: cover; background-position: center;")">
                        <div class="profile-cover-overlay"></div>
                        <button type="button" class="cover-edit-button" onclick="openCoverPhotoModal();" title="Change cover photo">
                            <i class="bi bi-camera-fill"></i>
                            <span>Edit Cover Photo</span>
                        </button>
                    </div>
                    <div class="profile-info-container">
                        <div class="profile-picture-section">
                            <div class="profile-picture-wrapper">
                                @if (!string.IsNullOrEmpty(Model.Profile.ProfilePicturePath))
                                {
                                    <img src="@Model.Profile.ProfilePicturePath" alt="Profile Picture" class="profile-picture" />
                                }
                                else
                                {
                                    <div class="profile-picture-placeholder">
                                        @Model.Profile.ProfileInitials
                                    </div>
                                }
                                <button type="button" class="camera-button" onclick="openProfilePhotoModal()" title="Update profile photo">
                                    <i class="bi bi-camera-fill"></i>
                                </button>
                            </div>
                        </div>
                        <div class="profile-details">
                            <div class="profile-name-section">
                                <h1 class="profile-name">@Model.Profile.DisplayName</h1>
                                @if (!string.IsNullOrEmpty(Model.Profile.Bio))
                                {
                                    <p class="profile-bio">@Model.Profile.Bio</p>
                                }
                            </div>
                            <div class="profile-info-grid">
                                @if (!string.IsNullOrEmpty(Model.Profile.Location))
                                {
                                    <div class="profile-info-item">
                                        <i class="bi bi-geo-alt"></i>
                                        <span>@Model.Profile.Location</span>
                                    </div>
                                }
                                @if (Model.Profile.DateOfBirth.HasValue && Model.Profile.Age > 0)
                                {
                                    <div class="profile-info-item">
                                        <i class="bi bi-calendar3"></i>
                                        <span>@Model.Profile.Age years old</span>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(Model.Profile.FavoriteRunningTime))
                                {
                                    <div class="profile-info-item">
                                        <i class="bi bi-clock"></i>
                                        <span>Runs @Model.Profile.FavoriteRunningTime.ToLower()</span>
                                    </div>
                                }
                                @if (Model.Profile.WeeklyDistance.HasValue)
                                {
                                    <div class="profile-info-item">
                                        <i class="bi bi-speedometer2"></i>
                                        <span>@Model.Profile.WeeklyDistance.Value.ToString("F1") km/week goal</span>
                                    </div>
                                }
                                <div class="profile-info-item">
                                    <i class="bi bi-calendar-plus"></i>
                                    <span>Joined @Model.Profile.FormattedJoinDate</span>
                                </div>
                            </div>
                        </div>
                        <div class="profile-actions">
                            <button type="button" class="btn btn-outline-primary" onclick="openEditProfileModal()">
                                <i class="bi bi-pencil me-2"></i>Edit Profile
                            </button>
                            @if (!string.IsNullOrEmpty(Model.Profile.Website))
                            {
                                <a href="@Model.Profile.Website" target="_blank" class="btn btn-outline-secondary">
                                    <i class="bi bi-link-45deg me-2"></i>Website
                                </a>
                            }
                        </div>
                    </div>
                </div>

                <!-- Activity Summary -->
                <div class="activity-summary">
                    <div class="row text-center">
                        <div class="col-3">
                            <div class="activity-stat">
                                <span class="activity-stat-number">@Model.TotalPosts</span>
                                <span class="activity-stat-label">Total Posts</span>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="activity-stat">
                                <span class="activity-stat-number">@Model.TotalDistance.ToString("F1")</span>
                                <span class="activity-stat-label">Recent KM</span>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="activity-stat">
                                <span class="activity-stat-number">@Model.TotalLikes</span>
                                <span class="activity-stat-label">Recent Likes</span>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="activity-stat">
                                <span class="activity-stat-number">@Model.TotalComments</span>
                                <span class="activity-stat-label">Recent Comments</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Post Creator -->
                <div class="post-creator">
                    <div class="post-creator-header">
                        <h6 class="mb-0">
                            <i class="bi bi-pencil-square me-2"></i>Share Your Activity
                        </h6>
                    </div>
                    <form asp-action="MyActivity" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="isPostSubmission" value="true" />
                        <div class="post-creator-body">
                            <textarea asp-for="CreatePost.Content" class="form-control post-textarea" 
                                     placeholder="What's on your mind? Share your jogging experience..." 
                                     rows="3"></textarea>
                            <span asp-validation-for="CreatePost.Content" class="text-danger"></span>
                            
                            <!-- Activity Details (Collapsible) -->
                            <div class="activity-details" id="activityDetails" style="display: none;">
                                <h6 class="mb-3">
                                    <i class="bi bi-activity me-2"></i>Activity Details
                                </h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label asp-for="CreatePost.SelectedTrackId" class="form-label">Select Track</label>
                                            <select asp-for="CreatePost.SelectedTrackId" class="form-select track-dropdown" id="trackSelect" onchange="updateTrackDetails()">
                                                <option value="">-- Select a track or enter custom route --</option>
                                                @foreach (var track in Model.AvailableTracks)
                                                {
                                                    <option value="@track.Id" data-distance="@track.Distance.ToString("F1")" data-name="@track.Name" data-region="@track.Region">
                                                        @track.Name (@track.Distance.ToString("F1") km) - @track.Region
                                                    </option>
                                                }
                                            </select>
                                            <small class="text-muted">Search by typing track name</small>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Duration</label>
                                            <button type="button" class="form-control ios-picker-button" id="durationPickerButton" onclick="toggleDurationPicker()">
                                                <span id="selectedDuration">Select Duration</span>
                                                <i class="bi bi-chevron-down ms-auto"></i>
                                            </button>
                                            <div class="ios-picker-container" id="durationPickerContainer" style="display: none;">
                                                <div class="ios-picker-header">
                                                    <button type="button" class="ios-picker-cancel" onclick="cancelDurationPicker()">Cancel</button>
                                                    <span class="ios-picker-title">Select Duration</span>
                                                    <button type="button" class="ios-picker-done" onclick="confirmDurationPicker()">Done</button>
                                                </div>
                                                <div class="ios-picker-wheels">
                                                    <div class="ios-picker-wheel" id="hoursWheel">
                                                        <div class="ios-picker-label">hours</div>
                                                        <div class="ios-picker-options" id="hoursOptions"></div>
                                                    </div>
                                                    <div class="ios-picker-wheel" id="minutesWheel">
                                                        <div class="ios-picker-label">min</div>
                                                        <div class="ios-picker-options" id="minutesOptions"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <input asp-for="CreatePost.DurationInput" type="hidden" id="hiddenDuration" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label asp-for="CreatePost.Route" class="form-label">Custom Route/Location</label>
                                            <input asp-for="CreatePost.Route" class="form-control" id="customRoute" placeholder="Enter custom route or location" />
                                            <small class="text-muted">Leave empty if using selected track above</small>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label asp-for="CreatePost.Distance" class="form-label">Distance (km)</label>
                                            <input asp-for="CreatePost.Distance" class="form-control" id="distanceField" step="0.1" readonly style="background-color: #f8f9fa;" />
                                            <small class="text-muted">Auto-filled from selected track</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Activity Date</label>
                                            <button type="button" class="form-control ios-picker-button" id="datePickerButton" onclick="toggleDatePicker()">
                                                <span id="selectedDate">Select Date</span>
                                                <i class="bi bi-chevron-down ms-auto"></i>
                                            </button>
                                            <div class="ios-picker-container" id="datePickerContainer" style="display: none;">
                                                <div class="ios-picker-header">
                                                    <button type="button" class="ios-picker-cancel" onclick="cancelDatePicker()">Cancel</button>
                                                    <span class="ios-picker-title">Select Date</span>
                                                    <button type="button" class="ios-picker-done" onclick="confirmDatePicker()">Done</button>
                                                </div>
                                                <div class="ios-picker-wheels">
                                                    <div class="ios-picker-wheel" id="monthWheel">
                                                        <div class="ios-picker-options" id="monthOptions"></div>
                                                    </div>
                                                    <div class="ios-picker-wheel" id="dayWheel">
                                                        <div class="ios-picker-options" id="dayOptions"></div>
                                                    </div>
                                                    <div class="ios-picker-wheel" id="yearWheel">
                                                        <div class="ios-picker-options" id="yearOptions"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <input asp-for="CreatePost.ActivityDate" type="hidden" id="hiddenActivityDate" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- File Upload Previews -->
                            <div id="filePreview" style="display: none;"></div>
                        </div>
                        
                        <div class="post-actions">
                            <button type="button" class="post-action-btn" onclick="document.getElementById('multiMediaUpload').click()">
                                <i class="bi bi-images text-primary me-2"></i>Multiple Photos/Videos
                            </button>
                            <button type="button" class="post-action-btn" onclick="document.getElementById('imageUpload').click()">
                                <i class="bi bi-image text-success me-2"></i>Single Photo
                            </button>
                            <button type="button" class="post-action-btn" onclick="document.getElementById('videoUpload').click()">
                                <i class="bi bi-camera-video text-danger me-2"></i>Single Video
                            </button>
                            <button type="button" class="post-action-btn" onclick="toggleActivityDetails()">
                                <i class="bi bi-activity text-primary me-2"></i>Activity
                            </button>
                            <div class="ms-auto d-flex align-items-center gap-2">
                                <select asp-for="CreatePost.Privacy" class="form-select form-select-sm" style="width: auto;">
                                    <option value="0">Public</option>
                                    <option value="1">Private</option>
                                    <option value="2">Friends Only</option>
                                </select>
                                <button type="submit" class="btn btn-primary-fb">Post</button>
                            </div>
                        </div>
                        
                        <!-- Hidden file inputs -->
                        <input asp-for="CreatePost.MediaFiles" type="file" id="multiMediaUpload" accept="image/*,video/*" multiple style="display: none;" onchange="previewMultipleFiles(this)" />
                        <input asp-for="CreatePost.Image" type="file" id="imageUpload" accept="image/*" style="display: none;" onchange="previewFile(this, 'image')" />
                        <input asp-for="CreatePost.Video" type="file" id="videoUpload" accept="video/*" style="display: none;" onchange="previewFile(this, 'video')" />
                    </form>
                </div>

                <!-- Recent Posts Section -->
                @if (Model.Posts.Any())
                {
                    <div class="recent-posts-header">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">
                                <i class="bi bi-clock-history me-2"></i>Recent Activities
                            </h5>
                            @if (Model.TotalPosts > 5)
                            {
                                <small class="text-muted">
                                    Showing latest 5 of @Model.TotalPosts posts
                                    <a href="#" class="text-primary ms-2" onclick="loadAllPosts()">View All</a>
                                </small>
                            }
                        </div>
                    </div>
                }

                <!-- Posts Feed -->
                @foreach (var post in Model.Posts)
                {
                    <div class="activity-post @(TempData["NewPostId"] != null && TempData["NewPostId"].ToString() == post.Id.ToString() ? "new-post-highlight" : "")" data-post-id="@post.Id">
                        <!-- Post Header -->
                        <div class="post-header">
                            <div class="user-avatar">
                                @(post.UserName?.Substring(0, 1).ToUpper() ?? "U")
                            </div>
                            <div class="post-meta">
                                <div>
                                    <a href="#" class="post-author">@post.UserName</a>
                                    <span class="privacy-badge">
                                        @switch (post.Privacy)
                                        {
                                            case PostPrivacy.Public:
                                                <i class="bi bi-globe"></i>
                                                break;
                                            case PostPrivacy.Private:
                                                <i class="bi bi-lock"></i>
                                                break;
                                            case PostPrivacy.FriendsOnly:
                                                <i class="bi bi-people"></i>
                                                break;
                                        }
                                        @post.Privacy
                                    </span>
                                </div>
                                <div class="post-time">@post.TimeAgo</div>
                            </div>
                            @if (post.CanDelete)
                            {
                                <div class="dropdown">
                                    <button class="btn btn-sm" type="button" data-bs-toggle="dropdown">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item text-danger" href="#" onclick="deletePost(@post.Id)">
                                            <i class="bi bi-trash me-2"></i>Delete
                                        </a></li>
                                    </ul>
                                </div>
                            }
                        </div>

                        <!-- Post Content -->
                        <div class="post-content">
                            @post.Content
                            
                            @if (post.Distance.HasValue || post.Duration.HasValue || !string.IsNullOrEmpty(post.Route))
                            {
                                <div class="activity-details mt-3">
                                    <div class="row">
                                        @if (post.Distance.HasValue)
                                        {
                                            <div class="col-auto">
                                                <i class="bi bi-speedometer2 text-primary me-1"></i>
                                                <strong>@post.FormattedDistance</strong>
                                            </div>
                                        }
                                        @if (post.Duration.HasValue)
                                        {
                                            <div class="col-auto">
                                                <i class="bi bi-clock text-warning me-1"></i>
                                                <strong>@post.FormattedDuration</strong>
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(post.Route))
                                        {
                                            <div class="col-auto">
                                                <i class="bi bi-geo-alt text-success me-1"></i>
                                                <strong>@post.Route</strong>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Post Media -->
                        @if (post.MediaFiles.Any())
                        {
                            <div class="post-media">
                                @await Html.PartialAsync("_MediaGrid", post.MediaFiles)
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(post.ImagePath))
                        {
                            <div class="post-media">
                                <img src="@post.ImagePath" alt="Post image" class="post-image" />
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(post.VideoPath))
                        {
                            <div class="post-media">
                                <video controls class="post-video">
                                    <source src="@post.VideoPath" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            </div>
                        }

                        <!-- Post Stats -->
                        <div class="post-stats">
                            <div>
                                @if (post.LikesCount > 0)
                                {
                                    <span><i class="bi bi-heart-fill text-danger"></i> @post.LikesCount</span>
                                }
                            </div>
                            <div>
                                @if (post.Comments.Any())
                                {
                                    <span>@post.Comments.Count comments</span>
                                }
                            </div>
                        </div>

                        <!-- Post Actions -->
                        <div class="post-actions">
                            <button class="post-action-btn like-btn @(post.IsLikedByCurrentUser ? "liked" : "")" 
                                    onclick="toggleLike(@post.Id, this)">
                                <i class="bi @(post.IsLikedByCurrentUser ? "bi-heart-fill" : "bi-heart") me-2"></i>
                                <span>@(post.IsLikedByCurrentUser ? "Unlike" : "Like")</span>
                            </button>
                            <button class="post-action-btn" onclick="focusCommentInput(@post.Id)">
                                <i class="bi bi-chat me-2"></i>Comment
                            </button>
                        </div>

                        <!-- Comments Section -->
                        @if (post.Comments.Any())
                        {
                            <div class="comments-section">
                                @foreach (var comment in post.Comments)
                                {
                                    <div class="comment">
                                        <div class="comment-avatar">
                                            @(comment.UserName?.Substring(0, 1).ToUpper() ?? "U")
                                        </div>
                                        <div class="comment-content">
                                            <div class="comment-author">@comment.UserName</div>
                                            <div class="comment-text">@comment.Content</div>
                                            <div class="comment-time">@comment.TimeAgo</div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        <!-- Comment Form -->
                        <div class="comment-form">
                            <div class="comment-avatar">
                                @(User.Identity?.Name?.Substring(0, 1).ToUpper() ?? "U")
                            </div>
                            <input type="text" class="comment-input" placeholder="Write a comment..." 
                                   onkeypress="handleCommentKeyPress(event, @post.Id)" />
                            <button type="button" class="btn btn-primary-fb btn-sm" 
                                    onclick="addComment(@post.Id, this)">Post</button>
                        </div>
                    </div>
                }

                <!-- Empty State -->
                @if (!Model.Posts.Any())
                {
                    <div class="empty-state text-center py-5">
                        <div class="mb-4">
                            <i class="bi bi-journal-plus" style="font-size: 4rem; color: #e4e6ea;"></i>
                        </div>
                        <h5 class="text-muted mb-3">No activities yet</h5>
                        <p class="text-muted mb-4">Share your first jogging experience with the community!</p>
                        <button type="button" class="btn btn-primary" onclick="focusPostCreator()">
                            <i class="bi bi-plus-circle me-2"></i>Create Your First Post
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Profile Edit Modal -->
<div class="modal fade profile-modal" id="editProfileModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-person-gear me-2"></i>Edit Profile
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="editProfileModalBody">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Profile Photo Modal -->
<div class="modal fade" id="profilePhotoModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-camera me-2"></i>Update Profile Photo
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="profilePhotoForm" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <div class="text-center mb-3">
                        @if (!string.IsNullOrEmpty(Model.Profile.ProfilePicturePath))
                        {
                            <img src="@Model.Profile.ProfilePicturePath" alt="Current Profile" class="profile-photo-preview" id="currentPhoto" />
                        }
                        else
                        {
                            <div class="profile-photo-preview" id="currentPhoto" style="background: linear-gradient(135deg, #1877f2, #42a5f5); display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 24px;">
                                @Model.Profile.ProfileInitials
                            </div>
                        }
                    </div>
                    <div class="mb-3">
                        <label for="profilePhotoInput" class="form-label">Choose new photo</label>
                        <input type="file" class="form-control" id="profilePhotoInput" accept="image/*" onchange="previewProfilePhoto(this)">
                        <small class="text-muted">Recommended: Square image, at least 400x400 pixels</small>
                    </div>
                    <div class="d-grid">
                        <button type="button" class="btn btn-primary" onclick="uploadProfilePhoto()">
                            <i class="bi bi-upload me-2"></i>Upload Photo
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Cover Photo Modal -->
<div class="modal fade" id="coverPhotoModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi bi-image me-2"></i>Update Cover Photo
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="coverPhotoForm" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <div class="text-center mb-3">
                        @if (!string.IsNullOrEmpty(Model.Profile.CoverPhotoPath))
                        {
                            <img src="@Model.Profile.CoverPhotoPath" alt="Current Cover" class="cover-photo-preview" id="currentCover" />
                        }
                        else
                        {
                            <div class="cover-photo-preview" id="currentCover" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); display: flex; align-items: center; justify-content: center; color: white; font-weight: bold; font-size: 18px;">
                                No cover photo selected
                            </div>
                        }
                    </div>
                    <div class="mb-3">
                        <label for="coverPhotoInput" class="form-label">Choose new cover photo</label>
                        <input type="file" class="form-control" id="coverPhotoInput" accept="image/*" onchange="previewCoverPhoto(this)">
                        <small class="text-muted">Recommended: Wide image, at least 1200x400 pixels</small>
                    </div>
                    <div class="d-grid">
                        <button type="button" class="btn btn-primary" onclick="uploadCoverPhoto()">
                            <i class="bi bi-upload me-2"></i>Upload Cover Photo
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        function toggleActivityDetails() {
            const details = document.getElementById('activityDetails');
            details.style.display = details.style.display === 'none' ? 'block' : 'none';
        }

        function updateTrackDetails() {
            const trackSelect = document.getElementById('trackSelect');
            const distanceField = document.getElementById('distanceField');
            const customRoute = document.getElementById('customRoute');
            
            const selectedOption = trackSelect.options[trackSelect.selectedIndex];
            
            if (selectedOption.value) {
                // Track selected - populate distance and clear custom route
                const distance = selectedOption.getAttribute('data-distance');
                const trackName = selectedOption.getAttribute('data-name');
                
                distanceField.value = distance;
                customRoute.value = '';
                customRoute.disabled = true;
                customRoute.style.backgroundColor = '#f8f9fa';
                customRoute.placeholder = `Using "${trackName}" track`;
                
                // Make distance field readonly with selected track styling
                distanceField.readonly = true;
                distanceField.style.backgroundColor = '#e3f2fd';
                distanceField.style.borderColor = '#1877f2';
            } else {
                // No track selected - allow manual entry
                distanceField.value = '';
                customRoute.disabled = false;
                customRoute.style.backgroundColor = '';
                customRoute.placeholder = 'Enter custom route or location';
                
                // Allow manual distance entry
                distanceField.readonly = false;
                distanceField.style.backgroundColor = '';
                distanceField.style.borderColor = '';
            }
        }

        // iOS-style Date Picker Functions
        let selectedDateValues = { month: new Date().getMonth(), day: new Date().getDate(), year: new Date().getFullYear() };
        let tempDateValues = { ...selectedDateValues };

        function toggleDatePicker() {
            const container = document.getElementById('datePickerContainer');
            if (container.style.display === 'none') {
                initializeDatePicker();
                container.style.display = 'block';
                document.body.style.overflow = 'hidden';
            } else {
                container.style.display = 'none';
                document.body.style.overflow = '';
            }
        }

        function initializeDatePicker() {
            const months = ['January', 'February', 'March', 'April', 'May', 'June',
                           'July', 'August', 'September', 'October', 'November', 'December'];
            
            // Initialize month wheel
            const monthOptions = document.getElementById('monthOptions');
            monthOptions.innerHTML = '';
            months.forEach((month, index) => {
                const option = document.createElement('div');
                option.className = 'ios-picker-option';
                option.textContent = month;
                if (index === tempDateValues.month) option.classList.add('selected');
                monthOptions.appendChild(option);
            });

            // Initialize day wheel
            const dayOptions = document.getElementById('dayOptions');
            dayOptions.innerHTML = '';
            const daysInMonth = new Date(tempDateValues.year, tempDateValues.month + 1, 0).getDate();
            for (let day = 1; day <= daysInMonth; day++) {
                const option = document.createElement('div');
                option.className = 'ios-picker-option';
                option.textContent = day;
                if (day === tempDateValues.day) option.classList.add('selected');
                dayOptions.appendChild(option);
            }

            // Initialize year wheel
            const yearOptions = document.getElementById('yearOptions');
            yearOptions.innerHTML = '';
            const currentYear = new Date().getFullYear();
            for (let year = currentYear - 5; year <= currentYear + 1; year++) {
                const option = document.createElement('div');
                option.className = 'ios-picker-option';
                option.textContent = year;
                if (year === tempDateValues.year) option.classList.add('selected');
                yearOptions.appendChild(option);
            }

            // Center selected options and setup interactions
            centerSelectedOptions(['monthOptions', 'dayOptions', 'yearOptions']);
            setupWheelInteractions();
        }


        function updateDaysInMonth() {
            const dayOptions = document.getElementById('dayOptions');
            const daysInMonth = new Date(tempDateValues.year, tempDateValues.month + 1, 0).getDate();
            
            // Adjust day if it's beyond the new month's limit
            if (tempDateValues.day > daysInMonth) {
                tempDateValues.day = daysInMonth;
            }
            
            dayOptions.innerHTML = '';
            for (let day = 1; day <= daysInMonth; day++) {
                const option = document.createElement('div');
                option.className = 'ios-picker-option';
                option.textContent = day;
                option.onclick = () => selectDateOption('day', day);
                if (day === tempDateValues.day) option.classList.add('selected');
                dayOptions.appendChild(option);
            }
            
            centerSelectedOptions(['dayOptions']);
        }

        // Enhanced picker interaction functions
        const pickerState = {
            dragging: false,
            startY: 0,
            startTransform: 0,
            currentWheel: null,
            momentum: 0,
            lastMoveTime: 0
        };

        function centerSelectedOptions(containerIds) {
            containerIds.forEach(containerId => {
                const container = document.getElementById(containerId);
                const selected = container.querySelector('.selected');
                if (selected) {
                    const index = Array.from(container.children).indexOf(selected);
                    const offset = -index * 40;
                    container.style.transform = `translateY(${offset}px)`;
                    updateNearbyOptions(container, index);
                }
            });
        }

        function updateNearbyOptions(container, selectedIndex) {
            container.querySelectorAll('.ios-picker-option').forEach((option, index) => {
                option.classList.remove('selected', 'nearby');
                if (index === selectedIndex) {
                    option.classList.add('selected');
                } else if (Math.abs(index - selectedIndex) === 1) {
                    option.classList.add('nearby');
                }
            });
        }

        function setupWheelInteractions() {
            // Setup for all picker wheels
            ['monthOptions', 'dayOptions', 'yearOptions', 'hoursOptions', 'minutesOptions'].forEach(id => {
                const container = document.getElementById(id);
                if (!container) return;

                // Mouse wheel support
                container.addEventListener('wheel', (e) => {
                    e.preventDefault();
                    handleWheelScroll(container, e.deltaY);
                });

                // Mouse drag support
                container.addEventListener('mousedown', (e) => {
                    startDrag(container, e.clientY);
                });

                // Touch support
                container.addEventListener('touchstart', (e) => {
                    e.preventDefault();
                    startDrag(container, e.touches[0].clientY);
                }, { passive: false });

                // Keyboard support
                container.addEventListener('keydown', (e) => {
                    handleKeyboardNav(container, e);
                });

                container.setAttribute('tabindex', '0');
            });

            // Global mouse/touch move and end events
            document.addEventListener('mousemove', handleDragMove);
            document.addEventListener('mouseup', endDrag);
            document.addEventListener('touchmove', (e) => {
                if (pickerState.dragging) {
                    e.preventDefault();
                    handleDragMove(e.touches[0]);
                }
            }, { passive: false });
            document.addEventListener('touchend', endDrag);
        }

        function startDrag(container, clientY) {
            pickerState.dragging = true;
            pickerState.startY = clientY;
            pickerState.currentWheel = container;
            pickerState.lastMoveTime = Date.now();
            
            const transform = container.style.transform.match(/translateY\((-?\d+(?:\.\d+)?)px\)/);
            pickerState.startTransform = transform ? parseFloat(transform[1]) : 0;
            
            container.classList.add('dragging');
            document.body.style.cursor = 'grabbing';
        }

        function handleDragMove(e) {
            if (!pickerState.dragging || !pickerState.currentWheel) return;

            const clientY = e.clientY || e.clientY;
            const deltaY = clientY - pickerState.startY;
            const newTransform = pickerState.startTransform + deltaY;
            
            pickerState.currentWheel.style.transform = `translateY(${newTransform}px)`;
            
            // Calculate momentum for smooth scrolling
            const now = Date.now();
            pickerState.momentum = (clientY - pickerState.startY) / (now - pickerState.lastMoveTime);
            pickerState.lastMoveTime = now;
            
            updateSelectionFromTransform(pickerState.currentWheel, newTransform);
        }

        function endDrag() {
            if (!pickerState.dragging || !pickerState.currentWheel) return;

            const container = pickerState.currentWheel;
            container.classList.remove('dragging');
            document.body.style.cursor = '';

            // Apply momentum if there was significant movement
            if (Math.abs(pickerState.momentum) > 0.5) {
                const currentTransform = getCurrentTransform(container);
                const momentumDistance = pickerState.momentum * 100; // Adjust multiplier as needed
                const finalTransform = currentTransform + momentumDistance;
                
                container.style.transform = `translateY(${finalTransform}px)`;
                setTimeout(() => {
                    snapToNearestOption(container);
                }, 200);
            } else {
                snapToNearestOption(container);
            }

            pickerState.dragging = false;
            pickerState.currentWheel = null;
            pickerState.momentum = 0;
        }

        function handleWheelScroll(container, deltaY) {
            const currentTransform = getCurrentTransform(container);
            const wheelSensitivity = 40; // One option per wheel notch
            const newTransform = currentTransform - (deltaY > 0 ? wheelSensitivity : -wheelSensitivity);
            
            container.style.transform = `translateY(${newTransform}px)`;
            updateSelectionFromTransform(container, newTransform);
            
            // Debounced snap to nearest option
            clearTimeout(container.snapTimeout);
            container.snapTimeout = setTimeout(() => {
                snapToNearestOption(container);
            }, 150);
        }

        function handleKeyboardNav(container, e) {
            let direction = 0;
            if (e.key === 'ArrowUp') direction = -1;
            else if (e.key === 'ArrowDown') direction = 1;
            else return;

            e.preventDefault();
            
            const currentTransform = getCurrentTransform(container);
            const newTransform = currentTransform + (direction * 40);
            
            container.style.transform = `translateY(${newTransform}px)`;
            updateSelectionFromTransform(container, newTransform);
            snapToNearestOption(container);
        }

        function getCurrentTransform(container) {
            const transform = container.style.transform.match(/translateY\((-?\d+(?:\.\d+)?)px\)/);
            return transform ? parseFloat(transform[1]) : 0;
        }

        function snapToNearestOption(container) {
            const currentTransform = getCurrentTransform(container);
            const optionHeight = 40;
            const nearestIndex = Math.round(-currentTransform / optionHeight);
            const maxIndex = container.children.length - 1;
            const clampedIndex = Math.max(0, Math.min(nearestIndex, maxIndex));
            const snapTransform = -clampedIndex * optionHeight;
            
            container.style.transition = 'transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            container.style.transform = `translateY(${snapTransform}px)`;
            
            setTimeout(() => {
                container.style.transition = '';
            }, 300);
            
            updateSelectionFromTransform(container, snapTransform);
        }

        function updateSelectionFromTransform(container, transform) {
            const optionHeight = 40;
            const selectedIndex = Math.round(-transform / optionHeight);
            const clampedIndex = Math.max(0, Math.min(selectedIndex, container.children.length - 1));
            
            // Update visual selection
            updateNearbyOptions(container, clampedIndex);
            
            // Update the actual values based on container type
            const containerId = container.id;
            if (containerId === 'monthOptions') {
                tempDateValues.month = clampedIndex;
                if (document.getElementById('datePickerContainer').style.display !== 'none') {
                    updateDaysInMonth();
                }
            } else if (containerId === 'dayOptions') {
                tempDateValues.day = clampedIndex + 1;
            } else if (containerId === 'yearOptions') {
                const yearOption = container.children[clampedIndex];
                if (yearOption) {
                    tempDateValues.year = parseInt(yearOption.textContent);
                    if (document.getElementById('datePickerContainer').style.display !== 'none') {
                        updateDaysInMonth();
                    }
                }
            } else if (containerId === 'hoursOptions') {
                tempDurationValues.hours = clampedIndex;
            } else if (containerId === 'minutesOptions') {
                tempDurationValues.minutes = clampedIndex * 5;
            }
        }

        function confirmDatePicker() {
            selectedDateValues = { ...tempDateValues };
            const date = new Date(selectedDateValues.year, selectedDateValues.month, selectedDateValues.day);
            const formattedDate = date.toLocaleDateString('en-US', { 
                weekday: 'short', 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric' 
            });
            
            document.getElementById('selectedDate').textContent = formattedDate;
            document.getElementById('hiddenActivityDate').value = date.toISOString();
            toggleDatePicker();
        }

        function cancelDatePicker() {
            tempDateValues = { ...selectedDateValues };
            toggleDatePicker();
        }

        // iOS-style Duration Picker Functions
        let selectedDurationValues = { hours: 0, minutes: 0 };
        let tempDurationValues = { ...selectedDurationValues };

        function toggleDurationPicker() {
            const container = document.getElementById('durationPickerContainer');
            if (container.style.display === 'none') {
                initializeDurationPicker();
                container.style.display = 'block';
                document.body.style.overflow = 'hidden';
            } else {
                container.style.display = 'none';
                document.body.style.overflow = '';
            }
        }

        function initializeDurationPicker() {
            // Initialize hours wheel (0-23)
            const hoursOptions = document.getElementById('hoursOptions');
            hoursOptions.innerHTML = '';
            for (let hour = 0; hour <= 23; hour++) {
                const option = document.createElement('div');
                option.className = 'ios-picker-option';
                option.textContent = hour;
                if (hour === tempDurationValues.hours) option.classList.add('selected');
                hoursOptions.appendChild(option);
            }

            // Initialize minutes wheel (0, 5, 10, 15, ..., 55)
            const minutesOptions = document.getElementById('minutesOptions');
            minutesOptions.innerHTML = '';
            for (let minute = 0; minute < 60; minute += 5) {
                const option = document.createElement('div');
                option.className = 'ios-picker-option';
                option.textContent = minute.toString().padStart(2, '0');
                if (minute === tempDurationValues.minutes) option.classList.add('selected');
                minutesOptions.appendChild(option);
            }

            // Center selected options and setup interactions
            centerSelectedOptions(['hoursOptions', 'minutesOptions']);
            setupWheelInteractions();
        }


        function confirmDurationPicker() {
            selectedDurationValues = { ...tempDurationValues };
            const hours = selectedDurationValues.hours;
            const minutes = selectedDurationValues.minutes;
            
            let formattedDuration = '';
            if (hours > 0) {
                formattedDuration += `${hours}h `;
            }
            if (minutes > 0) {
                formattedDuration += `${minutes}m`;
            }
            if (formattedDuration === '') {
                formattedDuration = '0m';
            }
            
            document.getElementById('selectedDuration').textContent = formattedDuration.trim();
            document.getElementById('hiddenDuration').value = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
            toggleDurationPicker();
        }

        function cancelDurationPicker() {
            tempDurationValues = { ...selectedDurationValues };
            toggleDurationPicker();
        }

        function previewFile(input, type) {
            const preview = document.getElementById('filePreview');
            if (input.files && input.files[0]) {
                const file = input.files[0];
                preview.innerHTML = `
                    <div class="file-upload-preview">
                        <i class="bi bi-${type === 'image' ? 'image' : 'camera-video'} me-2"></i>
                        ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)
                        <button type="button" class="btn btn-sm btn-outline-danger ms-2" onclick="clearFile('${type}')">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                `;
                preview.style.display = 'block';
            }
        }

        function previewMultipleFiles(input) {
            const preview = document.getElementById('filePreview');
            if (input.files && input.files.length > 0) {
                let previewHtml = '<div class="multi-file-preview">';
                previewHtml += `<h6 class="mb-2"><i class="bi bi-images me-2"></i>${input.files.length} files selected</h6>`;
                
                for (let i = 0; i < Math.min(input.files.length, 5); i++) {
                    const file = input.files[i];
                    const isVideo = file.type.startsWith('video/');
                    const icon = isVideo ? 'camera-video' : 'image';
                    const color = isVideo ? 'text-danger' : 'text-success';
                    
                    previewHtml += `
                        <div class="file-item mb-2 p-2 border rounded">
                            <i class="bi bi-${icon} ${color} me-2"></i>
                            <span class="file-name">${file.name}</span>
                            <small class="text-muted ms-2">(${(file.size / 1024 / 1024).toFixed(2)} MB)</small>
                        </div>
                    `;
                }
                
                if (input.files.length > 5) {
                    previewHtml += `<small class="text-muted">...and ${input.files.length - 5} more files</small>`;
                }
                
                previewHtml += `
                    <button type="button" class="btn btn-sm btn-outline-danger mt-2" onclick="clearMultipleFiles()">
                        <i class="bi bi-x me-1"></i>Clear All
                    </button>
                </div>`;
                
                preview.innerHTML = previewHtml;
                preview.style.display = 'block';
                
                // Clear single file inputs when multiple files are selected
                document.getElementById('imageUpload').value = '';
                document.getElementById('videoUpload').value = '';
            }
        }

        function clearMultipleFiles() {
            const input = document.getElementById('multiMediaUpload');
            input.value = '';
            document.getElementById('filePreview').style.display = 'none';
        }

        function clearFile(type) {
            const input = document.getElementById(type + 'Upload');
            input.value = '';
            document.getElementById('filePreview').style.display = 'none';
            // Also clear multiple media upload when single file is selected
            document.getElementById('multiMediaUpload').value = '';
        }

        async function toggleLike(postId, button) {
            try {
                const response = await fetch('/Activity/ToggleLike', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `postId=${postId}`
                });

                const result = await response.json();
                if (result.success) {
                    const icon = button.querySelector('i');
                    const text = button.querySelector('span');
                    
                    if (result.isLiked) {
                        button.classList.add('liked');
                        icon.className = 'bi bi-heart-fill me-2';
                        text.textContent = 'Unlike';
                    } else {
                        button.classList.remove('liked');
                        icon.className = 'bi bi-heart me-2';
                        text.textContent = 'Like';
                    }

                    // Update likes count
                    const post = button.closest('.activity-post');
                    const statsDiv = post.querySelector('.post-stats div:first-child');
                    if (result.likesCount > 0) {
                        statsDiv.innerHTML = `<span><i class="bi bi-heart-fill text-danger"></i> ${result.likesCount}</span>`;
                    } else {
                        statsDiv.innerHTML = '';
                    }
                }
            } catch (error) {
                console.error('Error toggling like:', error);
            }
        }

        function focusCommentInput(postId) {
            const post = document.querySelector(`[data-post-id="${postId}"]`);
            const input = post.querySelector('.comment-input');
            input.focus();
        }

        function handleCommentKeyPress(event, postId) {
            if (event.key === 'Enter') {
                event.preventDefault();
                const button = event.target.nextElementSibling;
                addComment(postId, button);
            }
        }

        async function addComment(postId, button) {
            const input = button.previousElementSibling;
            const content = input.value.trim();
            
            if (!content) return;

            try {
                const response = await fetch('/Activity/AddComment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `postId=${postId}&content=${encodeURIComponent(content)}`
                });

                const result = await response.json();
                if (result.success) {
                    // Add comment to UI
                    const post = document.querySelector(`[data-post-id="${postId}"]`);
                    let commentsSection = post.querySelector('.comments-section');
                    
                    if (!commentsSection) {
                        commentsSection = document.createElement('div');
                        commentsSection.className = 'comments-section';
                        post.querySelector('.comment-form').before(commentsSection);
                    }

                    const commentHtml = `
                        <div class="comment">
                            <div class="comment-avatar">
                                ${result.comment.userName.substring(0, 1).toUpperCase()}
                            </div>
                            <div class="comment-content">
                                <div class="comment-author">${result.comment.userName}</div>
                                <div class="comment-text">${result.comment.content}</div>
                                <div class="comment-time">${result.comment.timeAgo}</div>
                            </div>
                        </div>
                    `;
                    
                    commentsSection.insertAdjacentHTML('beforeend', commentHtml);
                    input.value = '';

                    // Update comment count
                    const statsDiv = post.querySelector('.post-stats div:last-child');
                    const currentCount = commentsSection.children.length;
                    statsDiv.innerHTML = `<span>${currentCount} comment${currentCount !== 1 ? 's' : ''}</span>`;
                }
            } catch (error) {
                console.error('Error adding comment:', error);
            }
        }

        async function deletePost(postId) {
            if (!confirm('Are you sure you want to delete this post?')) return;

            try {
                const response = await fetch('/Activity/DeletePost', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `id=${postId}`
                });

                const result = await response.json();
                if (result.success) {
                    const post = document.querySelector(`[data-post-id="${postId}"]`);
                    post.remove();
                    
                    // Show empty state if no posts left
                    const remainingPosts = document.querySelectorAll('.activity-post').length;
                    if (remainingPosts === 0) {
                        location.reload(); // Reload to show empty state
                    }
                }
            } catch (error) {
                console.error('Error deleting post:', error);
            }
        }

        function focusPostCreator() {
            const textarea = document.querySelector('.post-textarea');
            textarea.focus();
            textarea.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        function loadAllPosts() {
            // This would redirect to a full posts page or load more posts via AJAX
            // For now, we'll show an alert
            alert('Feature coming soon: View all posts in a separate page');
        }

        // Auto-scroll to new post and clear form on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Scroll to new post if it exists
            const newPost = document.querySelector('.new-post-highlight');
            if (newPost) {
                setTimeout(() => {
                    newPost.scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'center' 
                    });
                }, 500);
            }

            // Clear form if post was successful
            @if (TempData["Success"] != null)
            {
                <text>
                // Clear the post creation form
                const textarea = document.querySelector('.post-textarea');
                const activityDetails = document.getElementById('activityDetails');
                const filePreview = document.getElementById('filePreview');
                
                if (textarea) textarea.value = '';
                if (activityDetails) activityDetails.style.display = 'none';
                if (filePreview) filePreview.style.display = 'none';
                
                // Clear all form inputs
                document.querySelectorAll('#activityDetails input').forEach(input => {
                    input.value = '';
                    input.disabled = false;
                    input.readonly = false;
                    input.style.backgroundColor = '';
                    input.style.borderColor = '';
                });
                
                // Reset track dropdown
                const trackSelect = document.getElementById('trackSelect');
                if (trackSelect) trackSelect.value = '';
                
                // Reset custom route field
                const customRoute = document.getElementById('customRoute');
                if (customRoute) {
                    customRoute.disabled = false;
                    customRoute.style.backgroundColor = '';
                    customRoute.placeholder = 'Enter custom route or location';
                }
                
                // Reset file inputs
                const imageUpload = document.getElementById('imageUpload');
                const videoUpload = document.getElementById('videoUpload');
                if (imageUpload) imageUpload.value = '';
                if (videoUpload) videoUpload.value = '';
                
                // Reset privacy dropdown
                const privacySelect = document.querySelector('select[name="CreatePost.Privacy"]');
                if (privacySelect) privacySelect.value = '0';
                
                // Reset iOS pickers
                selectedDateValues = { month: new Date().getMonth(), day: new Date().getDate(), year: new Date().getFullYear() };
                selectedDurationValues = { hours: 0, minutes: 0 };
                document.getElementById('selectedDate').textContent = 'Select Date';
                document.getElementById('selectedDuration').textContent = 'Select Duration';
                </text>
            }
            
            // Add form submission handling to prevent content loss during validation errors
            const form = document.querySelector('form[action*="MyActivity"]');
            if (form) {
                form.addEventListener('submit', function(e) {
                    const submitButton = form.querySelector('button[type="submit"]');
                    if (submitButton) {
                        submitButton.disabled = true;
                        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status"></span>Posting...';
                        
                        // Re-enable after 5 seconds to prevent permanent disable
                        setTimeout(() => {
                            submitButton.disabled = false;
                            submitButton.innerHTML = 'Post';
                        }, 5000);
                    }
                });
            }
        });

        // Profile management functions
        async function openEditProfileModal() {
            try {
                const response = await fetch('/Activity/EditProfile');
                const html = await response.text();
                document.getElementById('editProfileModalBody').innerHTML = html;
                
                const modal = new bootstrap.Modal(document.getElementById('editProfileModal'));
                modal.show();
            } catch (error) {
                console.error('Error loading profile edit form:', error);
                alert('Error loading profile form. Please try again.');
            }
        }

        function openProfilePhotoModal() {
            const modal = new bootstrap.Modal(document.getElementById('profilePhotoModal'));
            modal.show();
        }

        function openCoverPhotoModal() {
            console.log('openCoverPhotoModal called');
            const modalElement = document.getElementById('coverPhotoModal');
            console.log('Modal element:', modalElement);
            
            if (!modalElement) {
                console.error('Cover photo modal not found!');
                alert('Cover photo modal not found. Please refresh the page.');
                return;
            }
            
            try {
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
                console.log('Modal should be showing now');
            } catch (error) {
                console.error('Error opening modal:', error);
                alert('Error opening cover photo modal: ' + error.message);
            }
        }

        function previewProfilePhoto(input) {
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('currentPhoto');
                    if (preview.tagName === 'IMG') {
                        preview.src = e.target.result;
                    } else {
                        // Replace placeholder with image
                        preview.outerHTML = `<img src="${e.target.result}" alt="Profile Preview" class="profile-photo-preview" id="currentPhoto" />`;
                    }
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        function previewCoverPhoto(input) {
            if (input.files && input.files[0]) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('currentCover');
                    if (preview.tagName === 'IMG') {
                        preview.src = e.target.result;
                    } else {
                        // Replace placeholder with image
                        preview.outerHTML = `<img src="${e.target.result}" alt="Cover Preview" class="cover-photo-preview" id="currentCover" />`;
                    }
                };
                reader.readAsDataURL(input.files[0]);
            }
        }

        async function uploadProfilePhoto() {
            const input = document.getElementById('profilePhotoInput');
            if (!input.files || !input.files[0]) {
                alert('Please select a photo first.');
                return;
            }

            const formData = new FormData();
            formData.append('ProfilePicture', input.files[0]);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            try {
                const button = event.target;
                button.disabled = true;
                button.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Uploading...';

                const response = await fetch('/Activity/EditProfile', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    // Close modal and reload page to show new photo
                    const modal = bootstrap.Modal.getInstance(document.getElementById('profilePhotoModal'));
                    modal.hide();
                    location.reload();
                } else {
                    alert('Error uploading photo. Please try again.');
                }
            } catch (error) {
                console.error('Error uploading photo:', error);
                alert('Error uploading photo. Please try again.');
            } finally {
                const button = event.target;
                button.disabled = false;
                button.innerHTML = '<i class="bi bi-upload me-2"></i>Upload Photo';
            }
        }

        async function uploadCoverPhoto() {
            const input = document.getElementById('coverPhotoInput');
            if (!input.files || !input.files[0]) {
                alert('Please select a cover photo first.');
                return;
            }

            const formData = new FormData();
            formData.append('CoverPhoto', input.files[0]);
            formData.append('__RequestVerificationToken', document.querySelector('input[name="__RequestVerificationToken"]').value);

            try {
                const button = event.target;
                button.disabled = true;
                button.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Uploading...';

                const response = await fetch('/Activity/EditProfile', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                if (result.success) {
                    // Close modal and reload page to show new cover photo
                    const modal = bootstrap.Modal.getInstance(document.getElementById('coverPhotoModal'));
                    modal.hide();
                    location.reload();
                } else {
                    alert('Error uploading cover photo. Please try again.');
                }
            } catch (error) {
                console.error('Error uploading cover photo:', error);
                alert('Error uploading cover photo. Please try again.');
            } finally {
                const button = event.target;
                button.disabled = false;
                button.innerHTML = '<i class="bi bi-upload me-2"></i>Upload Cover Photo';
            }
        }

        // Handle profile edit form submission
        document.addEventListener('DOMContentLoaded', function() {
            // This will handle dynamically loaded edit profile forms
            document.addEventListener('submit', async function(e) {
                if (e.target.id === 'editProfileForm') {
                    e.preventDefault();
                    
                    const formData = new FormData(e.target);
                    
                    try {
                        const response = await fetch('/Activity/EditProfile', {
                            method: 'POST',
                            body: formData
                        });

                        if (response.ok) {
                            const result = await response.json();
                            if (result.success) {
                                // Close modal and reload page
                                const modal = bootstrap.Modal.getInstance(document.getElementById('editProfileModal'));
                                modal.hide();
                                location.reload();
                            } else {
                                // Handle validation errors
                                const html = await response.text();
                                document.getElementById('editProfileModalBody').innerHTML = html;
                            }
                        } else {
                            // Handle validation errors
                            const html = await response.text();
                            document.getElementById('editProfileModalBody').innerHTML = html;
                        }
                    } catch (error) {
                        console.error('Error submitting form:', error);
                        alert('Error updating profile. Please try again.');
                    }
                }
            });
        });
    </script>
}