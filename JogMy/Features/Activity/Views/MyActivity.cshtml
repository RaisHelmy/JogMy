@model JogMy.Features.Activity.ViewModels.MyActivityViewModel

@{
    ViewData["Title"] = "My Activity";
}

@section Styles {
    <style>
        .activity-feed {
            max-width: 680px;
            margin: 0 auto;
        }
        
        .post-creator, .activity-post {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            border: 1px solid #ddd;
        }
        
        .post-creator-header {
            padding: 12px 16px;
            border-bottom: 1px solid #e4e6ea;
        }
        
        .post-creator-body {
            padding: 16px;
        }
        
        .post-textarea {
            border: none;
            resize: none;
            font-size: 24px;
            color: #1c1e21;
            background: #f0f2f5;
            border-radius: 20px;
            padding: 8px 12px;
            min-height: 40px;
        }
        
        .post-textarea:focus {
            outline: none;
            box-shadow: none;
            background: #fff;
            border: 1px solid #1877f2;
        }
        
        .activity-details {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 12px;
            margin-top: 12px;
        }
        
        .post-actions {
            display: flex;
            gap: 8px;
            padding: 8px 16px;
            border-top: 1px solid #e4e6ea;
        }
        
        .post-action-btn {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 8px;
            border: none;
            background: none;
            color: #65676b;
            border-radius: 6px;
            transition: background-color 0.2s;
        }
        
        .post-action-btn:hover {
            background: #f0f2f5;
        }
        
        .post-header {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            gap: 8px;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: #1877f2;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        .post-meta {
            flex: 1;
        }
        
        .post-author {
            font-weight: 600;
            color: #1c1e21;
            text-decoration: none;
        }
        
        .post-time {
            font-size: 13px;
            color: #65676b;
        }
        
        .privacy-badge {
            font-size: 11px;
            padding: 2px 6px;
            border-radius: 4px;
            background: #e4e6ea;
            color: #65676b;
            margin-left: 4px;
        }
        
        .post-content {
            padding: 0 16px 12px;
            color: #1c1e21;
            line-height: 1.3;
        }
        
        .post-media {
            margin: 12px 0;
        }
        
        .post-image, .post-video {
            width: 100%;
            border-radius: 8px;
        }
        
        .post-stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 16px;
            color: #65676b;
            font-size: 15px;
            border-top: 1px solid #e4e6ea;
        }
        
        .like-btn.liked {
            color: #1877f2;
        }
        
        .comments-section {
            border-top: 1px solid #e4e6ea;
        }
        
        .comment {
            display: flex;
            gap: 8px;
            padding: 8px 16px;
        }
        
        .comment-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #42b883;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
            font-weight: bold;
        }
        
        .comment-content {
            flex: 1;
            background: #f0f2f5;
            border-radius: 16px;
            padding: 8px 12px;
        }
        
        .comment-author {
            font-weight: 600;
            font-size: 13px;
            color: #1c1e21;
        }
        
        .comment-text {
            color: #1c1e21;
            font-size: 14px;
        }
        
        .comment-time {
            font-size: 12px;
            color: #65676b;
            margin-top: 2px;
        }
        
        .comment-form {
            display: flex;
            gap: 8px;
            padding: 8px 16px;
            border-top: 1px solid #e4e6ea;
        }
        
        .comment-input {
            flex: 1;
            border: 1px solid #ccd0d5;
            border-radius: 20px;
            padding: 8px 12px;
            font-size: 14px;
        }
        
        .comment-input:focus {
            outline: none;
            border-color: #1877f2;
        }
        
        .btn-primary-fb {
            background: #1877f2;
            border: none;
            color: white;
            font-weight: 600;
            border-radius: 6px;
            padding: 6px 16px;
        }
        
        .btn-primary-fb:hover {
            background: #166fe5;
        }
        
        .activity-summary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 20px;
        }
        
        .activity-stat {
            text-align: center;
        }
        
        .activity-stat-number {
            font-size: 24px;
            font-weight: bold;
            display: block;
        }
        
        .activity-stat-label {
            font-size: 12px;
            opacity: 0.9;
        }
        
        .file-upload-preview {
            margin-top: 8px;
            padding: 8px;
            background: #f8f9fa;
            border-radius: 6px;
            font-size: 13px;
            color: #65676b;
        }
        
        .recent-posts-header {
            margin: 20px 0 10px 0;
        }
        
        .recent-posts-header h5 {
            color: #1c1e21;
            font-weight: 600;
        }
        
        .empty-state {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            border: 1px solid #ddd;
            margin-top: 20px;
        }
        
        .new-post-highlight {
            animation: highlightPost 3s ease-in-out;
            border: 2px solid #1877f2 !important;
        }
        
        @@keyframes highlightPost {
            0% { 
                background-color: rgba(24, 119, 242, 0.1);
                transform: scale(1.02);
            }
            50% { 
                background-color: rgba(24, 119, 242, 0.05);
            }
            100% { 
                background-color: white;
                transform: scale(1);
            }
        }
    </style>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-8 mx-auto">
            <!-- Success/Error Messages -->
            @if (TempData["Success"] != null)
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <i class="bi bi-check-circle me-2"></i>@TempData["Success"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i>@TempData["Error"]
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            }
            
            <div class="activity-feed">
                <!-- Activity Summary -->
                <div class="activity-summary">
                    <div class="row text-center">
                        <div class="col-3">
                            <div class="activity-stat">
                                <span class="activity-stat-number">@Model.TotalPosts</span>
                                <span class="activity-stat-label">Total Posts</span>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="activity-stat">
                                <span class="activity-stat-number">@Model.TotalDistance.ToString("F1")</span>
                                <span class="activity-stat-label">Recent KM</span>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="activity-stat">
                                <span class="activity-stat-number">@Model.TotalLikes</span>
                                <span class="activity-stat-label">Recent Likes</span>
                            </div>
                        </div>
                        <div class="col-3">
                            <div class="activity-stat">
                                <span class="activity-stat-number">@Model.TotalComments</span>
                                <span class="activity-stat-label">Recent Comments</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Post Creator -->
                <div class="post-creator">
                    <div class="post-creator-header">
                        <h6 class="mb-0">
                            <i class="bi bi-pencil-square me-2"></i>Share Your Activity
                        </h6>
                    </div>
                    <form asp-action="MyActivity" method="post" enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="isPostSubmission" value="true" />
                        <div class="post-creator-body">
                            <textarea asp-for="CreatePost.Content" class="form-control post-textarea" 
                                     placeholder="What's on your mind? Share your jogging experience..." 
                                     rows="3"></textarea>
                            <span asp-validation-for="CreatePost.Content" class="text-danger"></span>
                            
                            <!-- Activity Details (Collapsible) -->
                            <div class="activity-details" id="activityDetails" style="display: none;">
                                <h6 class="mb-3">
                                    <i class="bi bi-activity me-2"></i>Activity Details
                                </h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label asp-for="CreatePost.Distance" class="form-label">Distance (km)</label>
                                            <input asp-for="CreatePost.Distance" class="form-control" step="0.1" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label asp-for="CreatePost.DurationInput" class="form-label">Duration (HH:MM)</label>
                                            <input asp-for="CreatePost.DurationInput" type="time" class="form-control" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label asp-for="CreatePost.Route" class="form-label">Route/Location</label>
                                            <input asp-for="CreatePost.Route" class="form-control" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label asp-for="CreatePost.ActivityDate" class="form-label">Activity Date</label>
                                            <input asp-for="CreatePost.ActivityDate" type="datetime-local" class="form-control" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- File Upload Previews -->
                            <div id="filePreview" style="display: none;"></div>
                        </div>
                        
                        <div class="post-actions">
                            <button type="button" class="post-action-btn" onclick="document.getElementById('imageUpload').click()">
                                <i class="bi bi-image text-success me-2"></i>Photo
                            </button>
                            <button type="button" class="post-action-btn" onclick="document.getElementById('videoUpload').click()">
                                <i class="bi bi-camera-video text-danger me-2"></i>Video
                            </button>
                            <button type="button" class="post-action-btn" onclick="toggleActivityDetails()">
                                <i class="bi bi-activity text-primary me-2"></i>Activity
                            </button>
                            <div class="ms-auto d-flex align-items-center gap-2">
                                <select asp-for="CreatePost.Privacy" class="form-select form-select-sm" style="width: auto;">
                                    <option value="0">Public</option>
                                    <option value="1">Private</option>
                                    <option value="2">Friends Only</option>
                                </select>
                                <button type="submit" class="btn btn-primary-fb">Post</button>
                            </div>
                        </div>
                        
                        <!-- Hidden file inputs -->
                        <input asp-for="CreatePost.Image" type="file" id="imageUpload" accept="image/*" style="display: none;" onchange="previewFile(this, 'image')" />
                        <input asp-for="CreatePost.Video" type="file" id="videoUpload" accept="video/*" style="display: none;" onchange="previewFile(this, 'video')" />
                    </form>
                </div>

                <!-- Recent Posts Section -->
                @if (Model.Posts.Any())
                {
                    <div class="recent-posts-header">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5 class="mb-0">
                                <i class="bi bi-clock-history me-2"></i>Recent Activities
                            </h5>
                            @if (Model.TotalPosts > 5)
                            {
                                <small class="text-muted">
                                    Showing latest 5 of @Model.TotalPosts posts
                                    <a href="#" class="text-primary ms-2" onclick="loadAllPosts()">View All</a>
                                </small>
                            }
                        </div>
                    </div>
                }

                <!-- Posts Feed -->
                @foreach (var post in Model.Posts)
                {
                    <div class="activity-post @(TempData["NewPostId"] != null && TempData["NewPostId"].ToString() == post.Id.ToString() ? "new-post-highlight" : "")" data-post-id="@post.Id">
                        <!-- Post Header -->
                        <div class="post-header">
                            <div class="user-avatar">
                                @(post.UserName?.Substring(0, 1).ToUpper() ?? "U")
                            </div>
                            <div class="post-meta">
                                <div>
                                    <a href="#" class="post-author">@post.UserName</a>
                                    <span class="privacy-badge">
                                        @switch (post.Privacy)
                                        {
                                            case PostPrivacy.Public:
                                                <i class="bi bi-globe"></i>
                                                break;
                                            case PostPrivacy.Private:
                                                <i class="bi bi-lock"></i>
                                                break;
                                            case PostPrivacy.FriendsOnly:
                                                <i class="bi bi-people"></i>
                                                break;
                                        }
                                        @post.Privacy
                                    </span>
                                </div>
                                <div class="post-time">@post.TimeAgo</div>
                            </div>
                            @if (post.CanDelete)
                            {
                                <div class="dropdown">
                                    <button class="btn btn-sm" type="button" data-bs-toggle="dropdown">
                                        <i class="bi bi-three-dots"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item text-danger" href="#" onclick="deletePost(@post.Id)">
                                            <i class="bi bi-trash me-2"></i>Delete
                                        </a></li>
                                    </ul>
                                </div>
                            }
                        </div>

                        <!-- Post Content -->
                        <div class="post-content">
                            @post.Content
                            
                            @if (post.Distance.HasValue || post.Duration.HasValue || !string.IsNullOrEmpty(post.Route))
                            {
                                <div class="activity-details mt-3">
                                    <div class="row">
                                        @if (post.Distance.HasValue)
                                        {
                                            <div class="col-auto">
                                                <i class="bi bi-speedometer2 text-primary me-1"></i>
                                                <strong>@post.FormattedDistance</strong>
                                            </div>
                                        }
                                        @if (post.Duration.HasValue)
                                        {
                                            <div class="col-auto">
                                                <i class="bi bi-clock text-warning me-1"></i>
                                                <strong>@post.FormattedDuration</strong>
                                            </div>
                                        }
                                        @if (!string.IsNullOrEmpty(post.Route))
                                        {
                                            <div class="col-auto">
                                                <i class="bi bi-geo-alt text-success me-1"></i>
                                                <strong>@post.Route</strong>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Post Media -->
                        @if (!string.IsNullOrEmpty(post.ImagePath))
                        {
                            <div class="post-media">
                                <img src="@post.ImagePath" alt="Post image" class="post-image" />
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(post.VideoPath))
                        {
                            <div class="post-media">
                                <video controls class="post-video">
                                    <source src="@post.VideoPath" type="video/mp4">
                                    Your browser does not support the video tag.
                                </video>
                            </div>
                        }

                        <!-- Post Stats -->
                        <div class="post-stats">
                            <div>
                                @if (post.LikesCount > 0)
                                {
                                    <span><i class="bi bi-heart-fill text-danger"></i> @post.LikesCount</span>
                                }
                            </div>
                            <div>
                                @if (post.Comments.Any())
                                {
                                    <span>@post.Comments.Count comments</span>
                                }
                            </div>
                        </div>

                        <!-- Post Actions -->
                        <div class="post-actions">
                            <button class="post-action-btn like-btn @(post.IsLikedByCurrentUser ? "liked" : "")" 
                                    onclick="toggleLike(@post.Id, this)">
                                <i class="bi @(post.IsLikedByCurrentUser ? "bi-heart-fill" : "bi-heart") me-2"></i>
                                <span>@(post.IsLikedByCurrentUser ? "Unlike" : "Like")</span>
                            </button>
                            <button class="post-action-btn" onclick="focusCommentInput(@post.Id)">
                                <i class="bi bi-chat me-2"></i>Comment
                            </button>
                        </div>

                        <!-- Comments Section -->
                        @if (post.Comments.Any())
                        {
                            <div class="comments-section">
                                @foreach (var comment in post.Comments)
                                {
                                    <div class="comment">
                                        <div class="comment-avatar">
                                            @(comment.UserName?.Substring(0, 1).ToUpper() ?? "U")
                                        </div>
                                        <div class="comment-content">
                                            <div class="comment-author">@comment.UserName</div>
                                            <div class="comment-text">@comment.Content</div>
                                            <div class="comment-time">@comment.TimeAgo</div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        <!-- Comment Form -->
                        <div class="comment-form">
                            <div class="comment-avatar">
                                @(User.Identity?.Name?.Substring(0, 1).ToUpper() ?? "U")
                            </div>
                            <input type="text" class="comment-input" placeholder="Write a comment..." 
                                   onkeypress="handleCommentKeyPress(event, @post.Id)" />
                            <button type="button" class="btn btn-primary-fb btn-sm" 
                                    onclick="addComment(@post.Id, this)">Post</button>
                        </div>
                    </div>
                }

                <!-- Empty State -->
                @if (!Model.Posts.Any())
                {
                    <div class="empty-state text-center py-5">
                        <div class="mb-4">
                            <i class="bi bi-journal-plus" style="font-size: 4rem; color: #e4e6ea;"></i>
                        </div>
                        <h5 class="text-muted mb-3">No activities yet</h5>
                        <p class="text-muted mb-4">Share your first jogging experience with the community!</p>
                        <button type="button" class="btn btn-primary" onclick="focusPostCreator()">
                            <i class="bi bi-plus-circle me-2"></i>Create Your First Post
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        function toggleActivityDetails() {
            const details = document.getElementById('activityDetails');
            details.style.display = details.style.display === 'none' ? 'block' : 'none';
        }

        function previewFile(input, type) {
            const preview = document.getElementById('filePreview');
            if (input.files && input.files[0]) {
                const file = input.files[0];
                preview.innerHTML = `
                    <div class="file-upload-preview">
                        <i class="bi bi-${type === 'image' ? 'image' : 'camera-video'} me-2"></i>
                        ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)
                        <button type="button" class="btn btn-sm btn-outline-danger ms-2" onclick="clearFile('${type}')">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                `;
                preview.style.display = 'block';
            }
        }

        function clearFile(type) {
            const input = document.getElementById(type + 'Upload');
            input.value = '';
            document.getElementById('filePreview').style.display = 'none';
        }

        async function toggleLike(postId, button) {
            try {
                const response = await fetch('/Activity/ToggleLike', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `postId=${postId}`
                });

                const result = await response.json();
                if (result.success) {
                    const icon = button.querySelector('i');
                    const text = button.querySelector('span');
                    
                    if (result.isLiked) {
                        button.classList.add('liked');
                        icon.className = 'bi bi-heart-fill me-2';
                        text.textContent = 'Unlike';
                    } else {
                        button.classList.remove('liked');
                        icon.className = 'bi bi-heart me-2';
                        text.textContent = 'Like';
                    }

                    // Update likes count
                    const post = button.closest('.activity-post');
                    const statsDiv = post.querySelector('.post-stats div:first-child');
                    if (result.likesCount > 0) {
                        statsDiv.innerHTML = `<span><i class="bi bi-heart-fill text-danger"></i> ${result.likesCount}</span>`;
                    } else {
                        statsDiv.innerHTML = '';
                    }
                }
            } catch (error) {
                console.error('Error toggling like:', error);
            }
        }

        function focusCommentInput(postId) {
            const post = document.querySelector(`[data-post-id="${postId}"]`);
            const input = post.querySelector('.comment-input');
            input.focus();
        }

        function handleCommentKeyPress(event, postId) {
            if (event.key === 'Enter') {
                event.preventDefault();
                const button = event.target.nextElementSibling;
                addComment(postId, button);
            }
        }

        async function addComment(postId, button) {
            const input = button.previousElementSibling;
            const content = input.value.trim();
            
            if (!content) return;

            try {
                const response = await fetch('/Activity/AddComment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `postId=${postId}&content=${encodeURIComponent(content)}`
                });

                const result = await response.json();
                if (result.success) {
                    // Add comment to UI
                    const post = document.querySelector(`[data-post-id="${postId}"]`);
                    let commentsSection = post.querySelector('.comments-section');
                    
                    if (!commentsSection) {
                        commentsSection = document.createElement('div');
                        commentsSection.className = 'comments-section';
                        post.querySelector('.comment-form').before(commentsSection);
                    }

                    const commentHtml = `
                        <div class="comment">
                            <div class="comment-avatar">
                                ${result.comment.userName.substring(0, 1).toUpperCase()}
                            </div>
                            <div class="comment-content">
                                <div class="comment-author">${result.comment.userName}</div>
                                <div class="comment-text">${result.comment.content}</div>
                                <div class="comment-time">${result.comment.timeAgo}</div>
                            </div>
                        </div>
                    `;
                    
                    commentsSection.insertAdjacentHTML('beforeend', commentHtml);
                    input.value = '';

                    // Update comment count
                    const statsDiv = post.querySelector('.post-stats div:last-child');
                    const currentCount = commentsSection.children.length;
                    statsDiv.innerHTML = `<span>${currentCount} comment${currentCount !== 1 ? 's' : ''}</span>`;
                }
            } catch (error) {
                console.error('Error adding comment:', error);
            }
        }

        async function deletePost(postId) {
            if (!confirm('Are you sure you want to delete this post?')) return;

            try {
                const response = await fetch('/Activity/DeletePost', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `id=${postId}`
                });

                const result = await response.json();
                if (result.success) {
                    const post = document.querySelector(`[data-post-id="${postId}"]`);
                    post.remove();
                    
                    // Show empty state if no posts left
                    const remainingPosts = document.querySelectorAll('.activity-post').length;
                    if (remainingPosts === 0) {
                        location.reload(); // Reload to show empty state
                    }
                }
            } catch (error) {
                console.error('Error deleting post:', error);
            }
        }

        function focusPostCreator() {
            const textarea = document.querySelector('.post-textarea');
            textarea.focus();
            textarea.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }

        function loadAllPosts() {
            // This would redirect to a full posts page or load more posts via AJAX
            // For now, we'll show an alert
            alert('Feature coming soon: View all posts in a separate page');
        }

        // Auto-scroll to new post and clear form on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Scroll to new post if it exists
            const newPost = document.querySelector('.new-post-highlight');
            if (newPost) {
                setTimeout(() => {
                    newPost.scrollIntoView({ 
                        behavior: 'smooth', 
                        block: 'center' 
                    });
                }, 500);
            }

            // Clear form if post was successful
            @if (TempData["Success"] != null)
            {
                <text>
                // Clear the post creation form
                const textarea = document.querySelector('.post-textarea');
                const activityDetails = document.getElementById('activityDetails');
                const filePreview = document.getElementById('filePreview');
                
                if (textarea) textarea.value = '';
                if (activityDetails) activityDetails.style.display = 'none';
                if (filePreview) filePreview.style.display = 'none';
                
                // Clear all form inputs
                document.querySelectorAll('#activityDetails input').forEach(input => {
                    input.value = '';
                });
                
                // Reset file inputs
                const imageUpload = document.getElementById('imageUpload');
                const videoUpload = document.getElementById('videoUpload');
                if (imageUpload) imageUpload.value = '';
                if (videoUpload) videoUpload.value = '';
                
                // Reset privacy dropdown
                const privacySelect = document.querySelector('select[name="CreatePost.Privacy"]');
                if (privacySelect) privacySelect.value = '0';
                </text>
            }
            
            // Add form submission handling to prevent content loss during validation errors
            const form = document.querySelector('form[action*="MyActivity"]');
            if (form) {
                form.addEventListener('submit', function(e) {
                    const submitButton = form.querySelector('button[type="submit"]');
                    if (submitButton) {
                        submitButton.disabled = true;
                        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status"></span>Posting...';
                        
                        // Re-enable after 5 seconds to prevent permanent disable
                        setTimeout(() => {
                            submitButton.disabled = false;
                            submitButton.innerHTML = 'Post';
                        }, 5000);
                    }
                });
            }
        });
    </script>
}