@{
    ViewData["Title"] = "Admin Terminal";
}

@Html.AntiForgeryToken()

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h2 class="mb-1">
                    <i class="bi bi-terminal text-primary me-2"></i>Admin Terminal
                </h2>
                <p class="text-muted mb-0">Execute commands to manage users and tracks</p>
            </div>
            <div>
                <button class="btn btn-outline-secondary btn-sm" onclick="clearTerminal()">
                    <i class="bi bi-trash me-1"></i>Clear
                </button>
                <button class="btn btn-outline-info btn-sm" onclick="showHelp()">
                    <i class="bi bi-question-circle me-1"></i>Help
                </button>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="terminal-container">
            <div class="terminal-header">
                <div class="terminal-controls">
                    <span class="terminal-control close"></span>
                    <span class="terminal-control minimize"></span>
                    <span class="terminal-control maximize"></span>
                </div>
                <div class="terminal-title">JogMy Admin Terminal</div>
            </div>
            <div class="terminal-body" id="terminalBody">
                <div class="terminal-welcome">
                    <div class="welcome-message">
                        ╔══════════════════════════════════════════════════════════════╗
                        ║                   🚴‍♂️ JogMy Admin Terminal 🚴‍♀️                  ║
                        ║                                                              ║
                        ║  Welcome, @User.Identity.Name!                                         ║
                        ║  Type 'help' to see available commands.                     ║
                        ║  Type 'clear' to clear the terminal.                        ║
                        ╚══════════════════════════════════════════════════════════════╝
                    </div>
                </div>
                <div id="terminalOutput"></div>
                <div class="terminal-input-line">
                    <span class="terminal-prompt">admin@jogmy:~$ </span>
                    <input type="text" id="terminalInput" class="terminal-input" autocomplete="off" placeholder="Type a command..." autofocus>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let commandHistory = [];
        let historyIndex = -1;

        document.addEventListener('DOMContentLoaded', function() {
            const terminalInput = document.getElementById('terminalInput');
            const terminalOutput = document.getElementById('terminalOutput');
            const terminalBody = document.getElementById('terminalBody');

            // Focus input when clicking anywhere in terminal
            terminalBody.addEventListener('click', function() {
                terminalInput.focus();
            });

            // Handle command input
            terminalInput.addEventListener('keydown', function(e) {
                switch(e.key) {
                    case 'Enter':
                        e.preventDefault();
                        executeCommand();
                        break;
                    case 'ArrowUp':
                        e.preventDefault();
                        navigateHistory(-1);
                        break;
                    case 'ArrowDown':
                        e.preventDefault();
                        navigateHistory(1);
                        break;
                    case 'Tab':
                        e.preventDefault();
                        insertTab();
                        break;
                }
            });

            // Auto-scroll to bottom
            function scrollToBottom() {
                terminalBody.scrollTop = terminalBody.scrollHeight;
            }

            // Execute command
            async function executeCommand() {
                const command = terminalInput.value.trim();
                if (!command) return;

                // Add to history
                commandHistory.push(command);
                historyIndex = commandHistory.length;

                // Display command
                addToOutput(`<span class="terminal-prompt">admin@jogmy:~$ </span>${escapeHtml(command)}`);

                // Clear input
                terminalInput.value = '';

                // Handle special commands
                if (command.toLowerCase() === 'clear') {
                    clearTerminal();
                    return;
                }

                if (command.toLowerCase() === 'help') {
                    showHelp();
                    return;
                }

                // Show loading
                const loadingId = 'loading-' + Date.now();
                addToOutput(`<div id="${loadingId}" class="terminal-loading">Executing command...</div>`);
                scrollToBottom();

                try {
                    const response = await fetch('/Admin/ExecuteCommand', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify({ command: command })
                    });

                    const result = await response.json();
                    
                    // Remove loading indicator
                    document.getElementById(loadingId)?.remove();

                    if (result.success) {
                        addToOutput(`<div class="terminal-output">${escapeHtml(result.output)}</div>`);
                    } else {
                        addToOutput(`<div class="terminal-error">${escapeHtml(result.output)}</div>`);
                    }
                } catch (error) {
                    document.getElementById(loadingId)?.remove();
                    addToOutput(`<div class="terminal-error">Network error: ${escapeHtml(error.message)}</div>`);
                }

                scrollToBottom();
            }

            // Add output to terminal
            function addToOutput(html) {
                const outputDiv = document.createElement('div');
                outputDiv.innerHTML = html;
                terminalOutput.appendChild(outputDiv);
            }

            // Navigate command history
            function navigateHistory(direction) {
                if (commandHistory.length === 0) return;

                historyIndex += direction;
                
                if (historyIndex < 0) {
                    historyIndex = 0;
                } else if (historyIndex >= commandHistory.length) {
                    historyIndex = commandHistory.length;
                    terminalInput.value = '';
                    return;
                }

                terminalInput.value = commandHistory[historyIndex] || '';
            }

            // Insert tab (4 spaces) at cursor position
            function insertTab() {
                const input = terminalInput;
                const start = input.selectionStart;
                const end = input.selectionEnd;
                const tabSpaces = '    '; // 4 spaces for tab

                // Insert tab spaces at cursor position
                input.value = input.value.substring(0, start) + tabSpaces + input.value.substring(end);
                
                // Move cursor to after the inserted spaces
                input.selectionStart = input.selectionEnd = start + tabSpaces.length;
            }

            // Escape HTML
            function escapeHtml(text) {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            }

            // Make functions globally accessible
            window.executeCommand = executeCommand;
            window.addToOutput = addToOutput;
            window.scrollToBottom = scrollToBottom;
        });

        // Clear terminal
        function clearTerminal() {
            document.getElementById('terminalOutput').innerHTML = '';
        }

        // Show help
        function showHelp() {
            addToOutput(`<div class="terminal-output">Available Commands:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

User Management:
  adduser &lt;email&gt; &lt;password&gt; &lt;fullname&gt; [role]
    - Create a new user account
    - role: optional (default: User, options: Admin, User)
    - Example: adduser john@example.com password123 "John Doe" Admin

  listusers
    - Display all registered users

Track Management:
  addtrack &lt;name&gt; &lt;region&gt; &lt;distance&gt; &lt;coordinates&gt;
    - Create a new jogging track
    - coordinates: JSON array format [[lat,lng],[lat,lng],...]
    - Example: addtrack "Central Park" "KL" 5.2 "[[3.1319,101.6841],[3.1320,101.6842]]"

  addtracks &lt;count&gt;
    - Generate multiple track commands template
    - Example: addtracks 3 (generates 3 track commands)

  addsampletracks
    - Add 5 predefined sample tracks to database
    - Example: addsampletracks

  listtracks
    - Display all available tracks

General:
  help      - Show this help message
  clear     - Clear terminal screen

Multiple Commands:
  Use semicolons (;) to run multiple commands in one line:
  
  Multiple Track Creation Examples:
  addtrack "Taman Tasik Perdana" "KL" 3.5 "[[3.1390,101.6869],[3.1391,101.6880]]"; addtrack "KLCC Park" "KL" 2.8 "[[3.1579,101.7123],[3.1580,101.7124]]"
  
  Multiple User Creation Examples:
  adduser user1@example.com pass123 "User One" User; adduser admin@example.com admin123 "Admin User" Admin
  
  Mixed Commands Examples:
  adduser test@example.com test123 "Test User" User; addtrack "Test Track" "KL" 2.0 "[[3.15,101.68],[3.16,101.69]]"; listtracks

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</div>`);
            scrollToBottom();
        }
    </script>
}

@section Styles {
    <style>
        .terminal-container {
            background: #1e1e1e;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.3);
            overflow: hidden;
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            max-height: 70vh;
        }

        .terminal-header {
            background: #2d2d2d;
            padding: 12px 16px;
            display: flex;
            align-items: center;
            border-bottom: 1px solid #404040;
        }

        .terminal-controls {
            display: flex;
            gap: 8px;
            margin-right: 16px;
        }

        .terminal-control {
            width: 12px;
            height: 12px;
            border-radius: 50%;
        }

        .terminal-control.close {
            background: #ff5f57;
        }

        .terminal-control.minimize {
            background: #ffbd2e;
        }

        .terminal-control.maximize {
            background: #28ca42;
        }

        .terminal-title {
            color: #cccccc;
            font-size: 13px;
            font-weight: 500;
        }

        .terminal-body {
            background: #1e1e1e;
            color: #cccccc;
            padding: 16px;
            height: 60vh;
            overflow-y: auto;
            font-size: 14px;
            line-height: 1.4;
        }

        .terminal-welcome {
            margin-bottom: 20px;
        }

        .welcome-message {
            color: #61dafb;
            font-family: monospace;
            font-size: 12px;
            white-space: pre;
            text-align: center;
            margin-bottom: 20px;
        }

        .terminal-input-line {
            display: flex;
            align-items: center;
            margin-top: 16px;
        }

        .terminal-prompt {
            color: #98c379;
            font-weight: bold;
            margin-right: 8px;
            flex-shrink: 0;
        }

        .terminal-input {
            background: transparent;
            border: none;
            color: #cccccc;
            font-family: inherit;
            font-size: inherit;
            outline: none;
            flex: 1;
            caret-color: #cccccc;
            white-space: pre;
            overflow-x: auto;
        }

        .terminal-input::placeholder {
            color: #666666;
        }

        .terminal-output {
            margin: 8px 0;
            white-space: pre-wrap;
            word-break: break-word;
        }

        .terminal-error {
            color: #e06c75;
            margin: 8px 0;
            white-space: pre-wrap;
        }

        .terminal-loading {
            color: #e5c07b;
            margin: 8px 0;
            animation: blink 1s infinite;
        }

        @@keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.3; }
        }

        /* Custom scrollbar */
        .terminal-body::-webkit-scrollbar {
            width: 8px;
        }

        .terminal-body::-webkit-scrollbar-track {
            background: #2d2d2d;
        }

        .terminal-body::-webkit-scrollbar-thumb {
            background: #555555;
            border-radius: 4px;
        }

        .terminal-body::-webkit-scrollbar-thumb:hover {
            background: #666666;
        }

        /* Mobile responsive */
        @@media (max-width: 768px) {
            .terminal-container {
                max-height: 80vh;
            }
            
            .terminal-body {
                height: 70vh;
                font-size: 12px;
            }
            
            .welcome-message {
                font-size: 10px;
            }
        }
    </style>
}