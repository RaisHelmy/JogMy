@model IEnumerable<JogMy.Models.JoggingTrack>

@{
    ViewData["Title"] = "Jogging Tracks";
}

<div class="mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h2 class="mb-1">
                <i class="bi bi-map text-primary me-2"></i>Jogging Tracks
            </h2>
            <p class="text-muted mb-0">Discover amazing jogging routes in KL and Selangor</p>
        </div>
        @if (User.IsInRole("Admin"))
        {
            <a asp-controller="Admin" asp-action="CreateTrack" class="btn btn-outline-primary">
                <i class="bi bi-plus-circle me-2"></i>Add Track
            </a>
        }
    </div>
</div>

<div class="row g-3">
    <div class="col-lg-8">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="bi bi-geo-alt me-2"></i>Interactive Map
                </h5>
            </div>
            <div class="card-body p-0">
                <div id="map" style="height: 500px; width: 100%;"></div>
            </div>
            <div class="card-footer bg-light">
                <div class="row align-items-center">
                    <div class="col-auto">
                        <label for="mapTileSelect" class="form-label mb-0">
                            <i class="bi bi-layers me-1"></i>Map Style:
                        </label>
                    </div>
                    <div class="col-auto">
                        <select id="mapTileSelect" class="form-select form-select-sm" onchange="changeMapTile(this.value)">
                            <option value="openstreetmap">OpenStreetMap</option>
                            <option value="cartodb-positron">CartoDB Positron</option>
                            <option value="cartodb-darkmatter">CartoDB Dark Matter</option>
                            <option value="cartodb-voyager">CartoDB Voyager</option>
                            <option value="stamen-terrain">Stamen Terrain</option>
                            <option value="stamen-toner">Stamen Toner</option>
                            <option value="stamen-watercolor">Stamen Watercolor</option>
                            <option value="esri-worldstreetmap">ESRI World Street Map</option>
                            <option value="esri-worldtopographic">ESRI World Topographic</option>
                            <option value="esri-worldimagery">ESRI World Imagery</option>
                            <option value="wikimedia">Wikimedia</option>
                            <option value="opentopomap">OpenTopoMap</option>
                        </select>
                    </div>
                    <div class="col">
                        <small class="text-muted">Choose your preferred map style</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="bi bi-list-ul me-2"></i>Available Tracks
                    @if (Model.Any())
                    {
                        <span class="badge bg-primary ms-2">@Model.Count()</span>
                    }
                </h5>
            </div>
            <div class="card-body p-0" style="max-height: 400px; overflow-y: auto;">
                @if (Model.Any())
                {
                    <div class="list-group list-group-flush">
                        @foreach (var track in Model)
                        {
                            <div class="list-group-item list-group-item-action">
                                <div class="d-flex w-100 justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1 text-primary">@track.Name</h6>
                                        <div class="d-flex align-items-center mb-1">
                                            <i class="bi bi-geo-alt text-muted me-1"></i>
                                            <small class="text-muted">@track.Region</small>
                                            <span class="mx-2 text-muted">â€¢</span>
                                            <i class="bi bi-speedometer text-muted me-1"></i>
                                            <small class="text-muted">@track.Distance km</small>
                                        </div>
                                        @if (!string.IsNullOrEmpty(track.Description))
                                        {
                                            <small class="text-muted d-block mb-2">@track.Description</small>
                                        }
                                        <button class="btn btn-sm btn-outline-primary" onclick="showTrackOnMap(@track.Id, '@track.Name.Replace("'", "\\'")'); return false;">
                                            <i class="bi bi-eye me-1"></i>View on Map
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center p-4">
                        <i class="bi bi-map text-muted" style="font-size: 3rem;"></i>
                        <h6 class="mt-3 text-muted">No tracks available yet</h6>
                        <p class="text-muted small mb-0">Check back soon for new jogging routes!</p>
                    </div>
                }
            </div>
        </div>

        @if (User.Identity.IsAuthenticated)
        {
            <div class="card mt-3 border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="mb-3">
                        <i class="bi bi-person-circle text-success" style="font-size: 2rem;"></i>
                    </div>
                    <h6 class="text-success">Welcome back!</h6>
                    <p class="text-muted small mb-3">@User.Identity.Name</p>
                    <form asp-controller="Account" asp-action="Logout" method="post" class="d-inline">
                        <button type="submit" class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-box-arrow-right me-1"></i>Logout
                        </button>
                    </form>
                </div>
            </div>
        }
        else
        {
            <div class="card mt-3 border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="mb-3">
                        <i class="bi bi-people text-primary" style="font-size: 2rem;"></i>
                    </div>
                    <h6 class="text-primary">Join JogMy Community</h6>
                    <p class="text-muted small mb-3">Get access to more features and track your progress</p>
                    <div class="d-grid gap-2">
                        <a asp-controller="Account" asp-action="Login" class="btn btn-primary btn-sm">
                            <i class="bi bi-box-arrow-in-right me-1"></i>Login
                        </a>
                        <a asp-controller="Account" asp-action="Register" class="btn btn-outline-primary btn-sm">
                            <i class="bi bi-person-plus me-1"></i>Register
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        let map;
        let currentLayer;
        let currentTileLayer;

        // Define available map tiles
        var mapTiles = {
            'openstreetmap': {
                url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'cartodb-positron': {
                url: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
            },
            'cartodb-darkmatter': {
                url: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
            },
            'cartodb-voyager': {
                url: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
            },
            'stamen-terrain': {
                url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png',
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'stamen-toner': {
                url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png',
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'stamen-watercolor': {
                url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.png',
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'esri-worldstreetmap': {
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',
                attribution: 'Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012'
            },
            'esri-worldtopographic': {
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}',
                attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'
            },
            'esri-worldimagery': {
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
                attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
            },
            'wikimedia': {
                url: 'https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png',
                attribution: '<a href="https://wikimediafoundation.org/wiki/Maps_Terms_of_Use">Wikimedia</a>'
            },
            'opentopomap': {
                url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
                attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
            }
        };

        // Initialize map
        function initializeMap() {
            try {
                map = L.map('map').setView([3.1319, 101.6841], 11); // Kuala Lumpur center

                // Initialize with OpenStreetMap
                var defaultTile = mapTiles['openstreetmap'];
                currentTileLayer = L.tileLayer(defaultTile.url, {
                    attribution: defaultTile.attribution
                }).addTo(map);

                // Load all tracks on map
                @foreach (var track in Model)
                {
                    <text>
                    try {
                        var coordinates = @Html.Raw(track.Coordinates);
                        if (coordinates && Array.isArray(coordinates)) {
                            // Store track data for later use
                            trackData[@track.Id] = {
                                coordinates: coordinates,
                                name: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.Name)),
                                region: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.Region)),
                                distance: @track.Distance,
                                description: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.Description ?? "")),
                                customDifficulty: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.CustomDifficulty ?? "")),
                                surfaceType: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.SurfaceType ?? "")),
                                specialFeatures: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.SpecialFeatures ?? "")),
                                bestTimeToJog: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.BestTimeToJog ?? "")),
                                safetyNotes: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.SafetyNotes ?? "")),
                                hasParking: @(track.HasParking.ToString().ToLower()),
                                hasWaterFountains: @(track.HasWaterFountains.ToString().ToLower()),
                                hasRestrooms: @(track.HasRestrooms.ToString().ToLower()),
                                isWellLit: @(track.IsWellLit.ToString().ToLower())
                            };
                            
                            var polyline = L.polyline(coordinates, {
                                color: '#007bff',
                                weight: 4,
                                opacity: 0.7
                            }).addTo(map);
                            
                            var tooltipContent = generateTooltipContent(trackData[@track.Id]);
                            polyline.bindPopup(tooltipContent, {
                                maxWidth: 350,
                                className: 'jogging-popup'
                            });
                        }
                    } catch (e) {
                        console.error('Error loading track @track.Id:', e);
                    }
                    </text>
                }
            } catch (e) {
                console.error('Error initializing map:', e);
            }
        }

        // Store track data for lookup
        var trackData = {};
        
        // Function to calculate estimated time (assuming 8 km/h average jogging speed)
        function calculateEstimatedTime(distance) {
            var avgSpeed = 8; // km/h
            var timeHours = distance / avgSpeed;
            var minutes = Math.round(timeHours * 60);
            
            if (minutes < 60) {
                return minutes + ' min';
            } else {
                var hours = Math.floor(minutes / 60);
                var remainingMinutes = minutes % 60;
                return hours + 'h ' + (remainingMinutes > 0 ? remainingMinutes + 'm' : '');
            }
        }
        
        // Function to calculate estimated calories (assuming 70kg person, 0.75 cal/kg/km)
        function calculateEstimatedCalories(distance) {
            var avgWeight = 70; // kg
            var caloriesPerKgKm = 0.75;
            var calories = Math.round(distance * avgWeight * caloriesPerKgKm);
            return calories + ' cal';
        }
        
        // Function to determine difficulty based on distance
        function getDifficulty(distance) {
            if (distance <= 3) {
                return { class: 'difficulty-easy', text: 'Easy' };
            } else if (distance <= 7) {
                return { class: 'difficulty-moderate', text: 'Moderate' };
            } else {
                return { class: 'difficulty-hard', text: 'Hard' };
            }
        }
        
        // Function to generate beautiful tooltip content with custom data
        function generateTooltipContent(trackData) {
            var estimatedTime = calculateEstimatedTime(trackData.distance);
            var estimatedCalories = calculateEstimatedCalories(trackData.distance);
            
            // Use custom difficulty if available, otherwise calculate from distance
            var difficulty = trackData.customDifficulty ? 
                { class: `difficulty-${trackData.customDifficulty.toLowerCase()}`, text: trackData.customDifficulty } :
                getDifficulty(trackData.distance);
            
            var hasDescription = trackData.description && trackData.description.trim() !== '';
            var surfaceType = trackData.surfaceType || 'Suitable for jogging, running, and walking';
            
            // Build amenities list
            var amenities = [];
            if (trackData.hasParking) amenities.push('<i class="bi bi-car-front me-1"></i>Parking');
            if (trackData.hasWaterFountains) amenities.push('<i class="bi bi-droplet me-1"></i>Water');
            if (trackData.hasRestrooms) amenities.push('<i class="bi bi-house me-1"></i>Restrooms');
            if (trackData.isWellLit) amenities.push('<i class="bi bi-lightbulb me-1"></i>Well Lit');
            
            return `
                <div class="jogging-tooltip">
                    <div class="tooltip-header">
                        <div class="track-icon">
                            <i class="bi bi-geo-alt-fill text-primary"></i>
                        </div>
                        <div class="track-title">
                            <h6 class="mb-0 fw-bold track-name">${trackData.name}</h6>
                            <small class="text-muted track-region">${trackData.region}</small>
                        </div>
                        <div class="track-badge">
                            <span class="badge bg-success track-distance">${trackData.distance} km</span>
                        </div>
                    </div>
                    
                    <div class="tooltip-body">
                        <div class="track-stats">
                            <div class="row g-2">
                                <div class="col-4">
                                    <div class="stat-item">
                                        <i class="bi bi-speedometer2 text-info"></i>
                                        <small class="d-block">Distance</small>
                                        <strong class="track-distance-detail">${trackData.distance} km</strong>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="stat-item">
                                        <i class="bi bi-clock text-warning"></i>
                                        <small class="d-block">Est. Time</small>
                                        <strong class="track-time">${estimatedTime}</strong>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="stat-item">
                                        <i class="bi bi-fire text-danger"></i>
                                        <small class="d-block">Calories</small>
                                        <strong class="track-calories">${estimatedCalories}</strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        ${hasDescription ? `
                        <div class="track-description mt-2">
                            <p class="mb-0 small text-muted track-desc-text">${trackData.description}</p>
                        </div>
                        ` : ''}
                        
                        ${trackData.specialFeatures ? `
                        <div class="track-features mt-2">
                            <small class="text-muted">
                                <i class="bi bi-star me-1"></i>
                                ${trackData.specialFeatures}
                            </small>
                        </div>
                        ` : ''}
                        
                        <div class="track-difficulty mt-2">
                            <small class="text-muted">Difficulty: </small>
                            <div class="difficulty-level d-inline-block">
                                <span class="difficulty-indicator ${difficulty.class}">${difficulty.text}</span>
                            </div>
                        </div>
                        
                        <div class="track-surface mt-1">
                            <small class="text-muted">
                                <i class="bi bi-road me-1"></i>
                                ${surfaceType}
                            </small>
                        </div>
                        
                        ${trackData.bestTimeToJog ? `
                        <div class="track-timing mt-1">
                            <small class="text-muted">
                                <i class="bi bi-clock-history me-1"></i>
                                Best time: ${trackData.bestTimeToJog}
                            </small>
                        </div>
                        ` : ''}
                        
                        ${amenities.length > 0 ? `
                        <div class="track-amenities mt-2">
                            <small class="text-muted d-block mb-1">Amenities:</small>
                            <div class="amenities-list">
                                ${amenities.map(amenity => `<small class="text-info me-2">${amenity}</small>`).join('')}
                            </div>
                        </div>
                        ` : ''}
                        
                        ${trackData.safetyNotes ? `
                        <div class="track-safety mt-2">
                            <small class="text-muted">
                                <i class="bi bi-shield-check me-1"></i>
                                ${trackData.safetyNotes}
                            </small>
                        </div>
                        ` : ''}
                    </div>
                    
                    <div class="tooltip-footer">
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">
                                <i class="bi bi-people me-1"></i>
                                Public track
                            </small>
                            <div class="track-actions">
                                <small class="text-primary">
                                    <i class="bi bi-eye me-1"></i>
                                    Track highlighted
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        function showTrackOnMap(trackId, trackName) {
            console.log('showTrackOnMap called with:', trackId, trackName);
            
            try {
                // Check if map is initialized
                if (!map) {
                    console.error('Map not initialized yet');
                    alert('Map is still loading, please try again in a moment');
                    return;
                }

                // Remove previous highlight
                if (currentLayer) {
                    map.removeLayer(currentLayer);
                }

                // Get track data from stored data
                var trackInfo = trackData[trackId];
                if (!trackInfo || !trackInfo.coordinates || !Array.isArray(trackInfo.coordinates) || trackInfo.coordinates.length === 0) {
                    console.error('Invalid track data for track:', trackName);
                    alert('No valid track data found');
                    return;
                }

                var coords = trackInfo.coordinates;
                console.log('Creating polyline with coords:', coords);
                currentLayer = L.polyline(coords, {
                    color: '#dc3545',
                    weight: 6,
                    opacity: 1
                }).addTo(map);

                // Center and fit map to show the track with animation
                console.log('Fitting bounds to track');
                map.fitBounds(currentLayer.getBounds(), {
                    padding: [20, 20],
                    maxZoom: 16,
                    animate: true,
                    duration: 1.0
                });
                
                // Show beautiful popup at track center after animation
                setTimeout(function() {
                    if (currentLayer) {
                        var tooltipContent = generateTooltipContent(trackInfo);
                        currentLayer.bindPopup(tooltipContent, {
                            maxWidth: 350,
                            className: 'jogging-popup'
                        }).openPopup();
                    }
                }, 500);
            } catch (e) {
                console.error('Error showing track on map:', e);
                alert('Error showing track: ' + e.message);
            }
        }

        // Initialize map when page loads
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(function() {
                console.log('Initializing map...');
                initializeMap();
            }, 100);
        });

        // Function to change map tiles
        function changeMapTile(tileKey) {
            try {
                if (!mapTiles[tileKey]) {
                    console.error('Unknown tile key:', tileKey);
                    return;
                }

                // Remove current tile layer
                if (currentTileLayer) {
                    map.removeLayer(currentTileLayer);
                }

                // Add new tile layer
                var tileConfig = mapTiles[tileKey];
                currentTileLayer = L.tileLayer(tileConfig.url, {
                    attribution: tileConfig.attribution
                }).addTo(map);

                console.log('Changed map tile to:', tileKey);
            } catch (e) {
                console.error('Error changing map tile:', e);
                alert('Error changing map style: ' + e.message);
            }
        }

        // Make functions globally accessible
        window.showTrackOnMap = showTrackOnMap;
        window.changeMapTile = changeMapTile;
    </script>
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        .jogging-tooltip {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            border: 1px solid rgba(0,0,0,0.1);
            padding: 0;
            min-width: 280px;
            max-width: 320px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .tooltip-header {
            padding: 12px 16px;
            border-bottom: 1px solid rgba(0,0,0,0.05);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .track-icon {
            font-size: 18px;
        }

        .track-title {
            flex: 1;
        }

        .track-name {
            font-size: 14px;
            color: #1a1a1a;
            line-height: 1.2;
        }

        .track-region {
            font-size: 11px;
            color: #666;
        }

        .track-badge .badge {
            font-size: 10px;
            padding: 4px 8px;
        }

        .tooltip-body {
            padding: 12px 16px;
        }

        .track-stats .stat-item {
            text-align: center;
            padding: 8px 4px;
            border-radius: 6px;
            background: rgba(0,0,0,0.02);
        }

        .stat-item i {
            font-size: 16px;
            margin-bottom: 2px;
        }

        .stat-item small {
            font-size: 10px;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stat-item strong {
            font-size: 12px;
            color: #1a1a1a;
        }

        .track-description {
            background: rgba(0,0,0,0.02);
            padding: 8px 12px;
            border-radius: 6px;
        }

        .difficulty-indicator {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .difficulty-easy {
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
        }

        .difficulty-moderate {
            background: rgba(251, 191, 36, 0.1);
            color: #d97706;
        }

        .difficulty-hard {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
        }

        .track-surface {
            font-size: 11px;
        }

        .tooltip-footer {
            padding: 12px 16px;
            background: rgba(0,0,0,0.02);
            border-top: 1px solid rgba(0,0,0,0.05);
            border-radius: 0 0 12px 12px;
        }

        /* Leaflet popup customization */
        .leaflet-popup-content-wrapper {
            border-radius: 12px;
            padding: 0;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }

        .leaflet-popup-content {
            margin: 0;
            line-height: 1.4;
        }

        .leaflet-popup-tip {
            background: white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        }

        .jogging-popup .leaflet-popup-close-button {
            color: #666;
            font-size: 18px;
            padding: 8px;
            top: 8px;
            right: 8px;
        }
    </style>
}