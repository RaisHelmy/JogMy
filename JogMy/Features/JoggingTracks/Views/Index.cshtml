@model IEnumerable<JogMy.Models.JoggingTrack>

@{
    ViewData["Title"] = "Jogging Tracks";
}

<div class="mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h2 class="mb-1">
                <i class="bi bi-map text-primary me-2"></i>Jogging Tracks
            </h2>
            <p class="text-muted mb-0">Discover amazing jogging routes in KL and Selangor</p>
        </div>
        @if (User.IsInRole("Admin"))
        {
            <a asp-controller="Admin" asp-action="CreateTrack" class="btn btn-outline-primary">
                <i class="bi bi-plus-circle me-2"></i>Add Track
            </a>
        }
    </div>
</div>

<div class="row g-3">
    <div class="col-lg-8">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="bi bi-geo-alt me-2"></i>Interactive Map
                </h5>
            </div>
            <div class="card-body p-0">
                <div id="map" style="height: 500px; width: 100%;"></div>
            </div>
            <div class="card-footer bg-light">
                <div class="row align-items-center">
                    <div class="col-auto">
                        <label for="mapTileSelect" class="form-label mb-0">
                            <i class="bi bi-layers me-1"></i>Map Style:
                        </label>
                    </div>
                    <div class="col-auto">
                        <select id="mapTileSelect" class="form-select form-select-sm" onchange="changeMapTile(this.value)">
                            <option value="openstreetmap">OpenStreetMap</option>
                            <option value="cartodb-positron">CartoDB Positron</option>
                            <option value="cartodb-darkmatter">CartoDB Dark Matter</option>
                            <option value="cartodb-voyager">CartoDB Voyager</option>
                            <option value="stamen-terrain">Stamen Terrain</option>
                            <option value="stamen-toner">Stamen Toner</option>
                            <option value="stamen-watercolor">Stamen Watercolor</option>
                            <option value="esri-worldstreetmap">ESRI World Street Map</option>
                            <option value="esri-worldtopographic">ESRI World Topographic</option>
                            <option value="esri-worldimagery">ESRI World Imagery</option>
                            <option value="wikimedia">Wikimedia</option>
                            <option value="opentopomap">OpenTopoMap</option>
                        </select>
                    </div>
                    <div class="col">
                        <small class="text-muted">Choose your preferred map style</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="bi bi-list-ul me-2"></i>Available Tracks
                    @if (Model.Any())
                    {
                        <span class="badge bg-primary ms-2">@Model.Count()</span>
                    }
                </h5>
            </div>
            <div class="card-body p-0" style="max-height: 400px; overflow-y: auto;">
                @if (Model.Any())
                {
                    <div class="list-group list-group-flush">
                        @foreach (var track in Model)
                        {
                            <div class="list-group-item list-group-item-action">
                                <div class="d-flex w-100 justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1 text-primary">@track.Name</h6>
                                        <div class="d-flex align-items-center mb-1">
                                            <i class="bi bi-geo-alt text-muted me-1"></i>
                                            <small class="text-muted">@track.Region</small>
                                            <span class="mx-2 text-muted">•</span>
                                            <i class="bi bi-speedometer text-muted me-1"></i>
                                            <small class="text-muted">@track.Distance km</small>
                                        </div>
                                        @if (!string.IsNullOrEmpty(track.Description))
                                        {
                                            <small class="text-muted d-block mb-2">@track.Description</small>
                                        }
                                        <div class="d-flex gap-1 flex-wrap" id="track-buttons-@track.Id">
                                            <button class="btn btn-sm btn-outline-primary" onclick="showTrackOnMap(@track.Id, '@track.Name.Replace("'", "\\'")'); return false;">
                                                <i class="bi bi-eye me-1"></i>View on Map
                                            </button>
                                            <!-- Google and Waze buttons will be added by JavaScript after coordinate parsing -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center p-4">
                        <i class="bi bi-map text-muted" style="font-size: 3rem;"></i>
                        <h6 class="mt-3 text-muted">No tracks available yet</h6>
                        <p class="text-muted small mb-0">Check back soon for new jogging routes!</p>
                    </div>
                }
            </div>
        </div>

        @if (User.Identity.IsAuthenticated)
        {
            <div class="card mt-3 border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="mb-3">
                        <i class="bi bi-person-circle text-success" style="font-size: 2rem;"></i>
                    </div>
                    <h6 class="text-success">Welcome back!</h6>
                    <p class="text-muted small mb-3">@User.Identity.Name</p>
                    <form asp-controller="Account" asp-action="Logout" method="post" class="d-inline">
                        <button type="submit" class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-box-arrow-right me-1"></i>Logout
                        </button>
                    </form>
                </div>
            </div>
        }
        else
        {
            <div class="card mt-3 border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="mb-3">
                        <i class="bi bi-people text-primary" style="font-size: 2rem;"></i>
                    </div>
                    <h6 class="text-primary">Join JogMy Community</h6>
                    <p class="text-muted small mb-3">Get access to more features and track your progress</p>
                    <div class="d-grid gap-2">
                        <a asp-controller="Account" asp-action="Login" class="btn btn-primary btn-sm">
                            <i class="bi bi-box-arrow-in-right me-1"></i>Login
                        </a>
                        <a asp-controller="Account" asp-action="Register" class="btn btn-outline-primary btn-sm">
                            <i class="bi bi-person-plus me-1"></i>Register
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Tooltip Gallery Modal -->
<div id="tooltipGalleryModal" class="gallery-modal" style="display: none;">
    <div class="gallery-backdrop" onclick="closeTooltipGallery()"></div>
    <div class="gallery-container">
        <button class="gallery-close" onclick="closeTooltipGallery()" title="Close (Esc)">
            <i class="bi bi-x-lg"></i>
        </button>
        
        <div class="gallery-content">
            <button class="gallery-nav gallery-nav-prev" onclick="navigateTooltipGallery(-1)" title="Previous (←)">
                <i class="bi bi-chevron-left"></i>
            </button>
            
            <div class="gallery-media-container">
                <div id="tooltipGalleryMedia" class="gallery-media"></div>
                <div class="gallery-counter">
                    <span id="tooltipGalleryCounter">1 / 1</span>
                </div>
            </div>
            
            <button class="gallery-nav gallery-nav-next" onclick="navigateTooltipGallery(1)" title="Next (→)">
                <i class="bi bi-chevron-right"></i>
            </button>
        </div>
        
        <div class="gallery-info">
            <h6 id="tooltipGalleryTitle" class="gallery-title mb-0"></h6>
            <small id="tooltipGalleryRegion" class="text-muted"></small>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        let map;
        let currentLayer;
        let currentTileLayer;

        // Define available map tiles
        var mapTiles = {
            'openstreetmap': {
                url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'cartodb-positron': {
                url: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
            },
            'cartodb-darkmatter': {
                url: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
            },
            'cartodb-voyager': {
                url: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
            },
            'stamen-terrain': {
                url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png',
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'stamen-toner': {
                url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png',
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'stamen-watercolor': {
                url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.png',
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'esri-worldstreetmap': {
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',
                attribution: 'Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012'
            },
            'esri-worldtopographic': {
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}',
                attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'
            },
            'esri-worldimagery': {
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
                attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
            },
            'wikimedia': {
                url: 'https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png',
                attribution: '<a href="https://wikimediafoundation.org/wiki/Maps_Terms_of_Use">Wikimedia</a>'
            },
            'opentopomap': {
                url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
                attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
            }
        };

        // Initialize map
        function initializeMap() {
            try {
                map = L.map('map').setView([3.1319, 101.6841], 11); // Kuala Lumpur center

                // Initialize with OpenStreetMap
                var defaultTile = mapTiles['openstreetmap'];
                currentTileLayer = L.tileLayer(defaultTile.url, {
                    attribution: defaultTile.attribution
                }).addTo(map);

                // Load all tracks on map
                @foreach (var track in Model)
                {
                    <text>
                    try {
                        var coordinates = @Html.Raw(track.Coordinates);
                        if (coordinates && Array.isArray(coordinates)) {
                            // Store track data for later use
                            trackData[@track.Id] = {
                                coordinates: coordinates,
                                name: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.Name)),
                                region: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.Region)),
                                distance: @track.Distance,
                                description: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.Description ?? "")),
                                customDifficulty: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.CustomDifficulty ?? "")),
                                surfaceType: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.SurfaceType ?? "")),
                                specialFeatures: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.SpecialFeatures ?? "")),
                                bestTimeToJog: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.BestTimeToJog ?? "")),
                                safetyNotes: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.SafetyNotes ?? "")),
                                hasParking: @(track.HasParking.ToString().ToLower()),
                                hasWaterFountains: @(track.HasWaterFountains.ToString().ToLower()),
                                hasRestrooms: @(track.HasRestrooms.ToString().ToLower()),
                                isWellLit: @(track.IsWellLit.ToString().ToLower()),
                                mediaFiles: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.MediaFiles.Select(m => new { 
                                    id = m.Id, 
                                    filePath = m.FilePath, 
                                    mediaType = (int)m.MediaType, 
                                    orderIndex = m.OrderIndex 
                                }).ToList()))
                            };
                            
                            // Add Google and Waze buttons to the Available Tracks panel
                            if (coordinates && coordinates.length > 0) {
                                var firstLat = coordinates[0][0];
                                var firstLng = coordinates[0][1];
                                var buttonContainer = document.getElementById('track-buttons-@track.Id');
                                if (buttonContainer && firstLat && firstLng) {
                                    var googleBtn = document.createElement('button');
                                    googleBtn.className = 'btn btn-sm btn-outline-success';
                                    googleBtn.innerHTML = '<i class="bi bi-geo-alt me-1"></i>Google';
                                    googleBtn.title = 'Open in Google Maps';
                                    googleBtn.onclick = function() { openInGoogleMaps(firstLat, firstLng); return false; };
                                    
                                    var wazeBtn = document.createElement('button');
                                    wazeBtn.className = 'btn btn-sm btn-outline-info';
                                    wazeBtn.innerHTML = '<i class="bi bi-navigation me-1"></i>Waze';
                                    wazeBtn.title = 'Open in Waze';
                                    wazeBtn.onclick = function() { openInWaze(firstLat, firstLng); return false; };
                                    
                                    buttonContainer.appendChild(googleBtn);
                                    buttonContainer.appendChild(wazeBtn);
                                }
                            }
                            
                            var polyline = L.polyline(coordinates, {
                                color: '#007bff',
                                weight: 4,
                                opacity: 0.7
                            }).addTo(map);
                            
                            var tooltipContent = generateTooltipContent(trackData[@track.Id], @track.Id);
                            polyline.bindPopup(tooltipContent, {
                                maxWidth: 350,
                                className: 'jogging-popup'
                            });
                        }
                    } catch (e) {
                        console.error('Error loading track @track.Id:', e);
                    }
                    </text>
                }
            } catch (e) {
                console.error('Error initializing map:', e);
            }
        }

        // Store track data for lookup
        var trackData = {};
        
        // Function to calculate estimated time (assuming 8 km/h average jogging speed)
        function calculateEstimatedTime(distance) {
            var avgSpeed = 8; // km/h
            var timeHours = distance / avgSpeed;
            var minutes = Math.round(timeHours * 60);
            
            if (minutes < 60) {
                return minutes + ' min';
            } else {
                var hours = Math.floor(minutes / 60);
                var remainingMinutes = minutes % 60;
                return hours + 'h ' + (remainingMinutes > 0 ? remainingMinutes + 'm' : '');
            }
        }
        
        // Function to calculate estimated calories (assuming 70kg person, 0.75 cal/kg/km)
        function calculateEstimatedCalories(distance) {
            var avgWeight = 70; // kg
            var caloriesPerKgKm = 0.75;
            var calories = Math.round(distance * avgWeight * caloriesPerKgKm);
            return calories + ' cal';
        }
        
        // Function to determine difficulty based on distance
        function getDifficulty(distance) {
            if (distance <= 3) {
                return { class: 'difficulty-easy', text: 'Easy' };
            } else if (distance <= 7) {
                return { class: 'difficulty-moderate', text: 'Moderate' };
            } else {
                return { class: 'difficulty-hard', text: 'Hard' };
            }
        }
        
        // Function to generate Google Maps-style media grid with clickable functionality
        function generateMediaGrid(mediaFiles, trackId) {
            if (!mediaFiles || mediaFiles.length === 0) return '';
            
            const maxVisible = 4; // Maximum visible photos like Google Maps
            const visibleMedia = mediaFiles.slice(0, maxVisible);
            const remainingCount = mediaFiles.length - maxVisible;
            
            let gridHtml = '';
            
            if (visibleMedia.length === 1) {
                // Single image - full width
                const media = visibleMedia[0];
                gridHtml = `
                    <div class="media-single">
                        ${media.mediaType === 1 
                            ? `<video src="${media.filePath}" class="media-thumb clickable-media" data-track-id="${trackId}" data-media-index="0" controls></video>`
                            : `<img src="${media.filePath}" alt="Track photo" class="media-thumb clickable-media" data-track-id="${trackId}" data-media-index="0" />`
                        }
                    </div>
                `;
            } else if (visibleMedia.length === 2) {
                // Two images side by side
                gridHtml = '<div class="media-row">';
                visibleMedia.forEach((media, index) => {
                    gridHtml += `
                        <div class="media-item-half">
                            ${media.mediaType === 1 
                                ? `<video src="${media.filePath}" class="media-thumb clickable-media" data-track-id="${trackId}" data-media-index="${index}"></video>`
                                : `<img src="${media.filePath}" alt="Track photo" class="media-thumb clickable-media" data-track-id="${trackId}" data-media-index="${index}" />`
                            }
                        </div>
                    `;
                });
                gridHtml += '</div>';
            } else if (visibleMedia.length === 3) {
                // First image full left, two stacked right
                const firstMedia = visibleMedia[0];
                gridHtml = `
                    <div class="media-row">
                        <div class="media-item-left">
                            ${firstMedia.mediaType === 1 
                                ? `<video src="${firstMedia.filePath}" class="media-thumb clickable-media" data-track-id="${trackId}" data-media-index="0"></video>`
                                : `<img src="${firstMedia.filePath}" alt="Track photo" class="media-thumb clickable-media" data-track-id="${trackId}" data-media-index="0" />`
                            }
                        </div>
                        <div class="media-stack-right">
                `;
                visibleMedia.slice(1).forEach((media, index) => {
                    gridHtml += `
                        <div class="media-item-stack">
                            ${media.mediaType === 1 
                                ? `<video src="${media.filePath}" class="media-thumb clickable-media" data-track-id="${trackId}" data-media-index="${index + 1}"></video>`
                                : `<img src="${media.filePath}" alt="Track photo" class="media-thumb clickable-media" data-track-id="${trackId}" data-media-index="${index + 1}" />`
                            }
                        </div>
                    `;
                });
                gridHtml += '</div></div>';
            } else {
                // Four or more: 2x2 grid with overlay on last item
                gridHtml = '<div class="media-grid-4">';
                visibleMedia.forEach((media, index) => {
                    const isLast = index === 3 && remainingCount > 0;
                    gridHtml += `
                        <div class="media-item-quarter ${isLast ? 'has-overlay' : ''}">
                            ${media.mediaType === 1 
                                ? `<video src="${media.filePath}" class="media-thumb clickable-media" data-track-id="${trackId}" data-media-index="${index}"></video>`
                                : `<img src="${media.filePath}" alt="Track photo" class="media-thumb clickable-media" data-track-id="${trackId}" data-media-index="${index}" />`
                            }
                            ${isLast ? `<div class="media-overlay clickable-media" data-track-id="${trackId}" data-media-index="${index}">+${remainingCount}</div>` : ''}
                        </div>
                    `;
                });
                gridHtml += '</div>';
            }
            
            return gridHtml;
        }

        // Function to generate beautiful tooltip content with custom data
        function generateTooltipContent(trackData, trackId) {
            var estimatedTime = calculateEstimatedTime(trackData.distance);
            var estimatedCalories = calculateEstimatedCalories(trackData.distance);
            
            // Use custom difficulty if available, otherwise calculate from distance
            var difficulty = trackData.customDifficulty ? 
                { class: `difficulty-${trackData.customDifficulty.toLowerCase()}`, text: trackData.customDifficulty } :
                getDifficulty(trackData.distance);
            
            var hasDescription = trackData.description && trackData.description.trim() !== '';
            var surfaceType = trackData.surfaceType || 'Suitable for jogging, running, and walking';
            
            // Extract first coordinate for navigation apps
            var firstLat = '';
            var firstLng = '';
            if (trackData.coordinates && trackData.coordinates.length > 0) {
                firstLat = trackData.coordinates[0][0];
                firstLng = trackData.coordinates[0][1];
            }
            
            // Build amenities list
            var amenities = [];
            if (trackData.hasParking) amenities.push('<i class="bi bi-car-front me-1"></i>Parking');
            if (trackData.hasWaterFountains) amenities.push('<i class="bi bi-droplet me-1"></i>Water');
            if (trackData.hasRestrooms) amenities.push('<i class="bi bi-house me-1"></i>Restrooms');
            if (trackData.isWellLit) amenities.push('<i class="bi bi-lightbulb me-1"></i>Well Lit');
            
            return `
                <div class="jogging-tooltip">
                    <div class="tooltip-header">
                        <div class="track-icon">
                            <i class="bi bi-geo-alt-fill text-primary"></i>
                        </div>
                        <div class="track-title">
                            <h6 class="mb-0 fw-bold track-name">${trackData.name}</h6>
                            <small class="text-muted track-region">${trackData.region}</small>
                        </div>
                        <div class="track-badge">
                            <span class="badge bg-success track-distance">${trackData.distance} km</span>
                        </div>
                    </div>
                    
                    <div class="tooltip-body">
                        <div class="track-stats">
                            <div class="row g-2">
                                <div class="col-4">
                                    <div class="stat-item">
                                        <i class="bi bi-speedometer2 text-info"></i>
                                        <small class="d-block">Distance</small>
                                        <strong class="track-distance-detail">${trackData.distance} km</strong>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="stat-item">
                                        <i class="bi bi-clock text-warning"></i>
                                        <small class="d-block">Est. Time</small>
                                        <strong class="track-time">${estimatedTime}</strong>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <div class="stat-item">
                                        <i class="bi bi-fire text-danger"></i>
                                        <small class="d-block">Calories</small>
                                        <strong class="track-calories">${estimatedCalories}</strong>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        ${trackData.mediaFiles && trackData.mediaFiles.length > 0 ? `
                        <div class="track-media-preview mt-3">
                            <div class="media-grid-tooltip">
                                ${generateMediaGrid(trackData.mediaFiles, trackId)}
                            </div>
                        </div>
                        ` : ''}
                        
                        ${hasDescription ? `
                        <div class="track-description mt-2">
                            <p class="mb-0 small text-muted track-desc-text">${trackData.description}</p>
                        </div>
                        ` : ''}
                        
                        ${trackData.specialFeatures ? `
                        <div class="track-features mt-2">
                            <small class="text-muted">
                                <i class="bi bi-star me-1"></i>
                                ${trackData.specialFeatures}
                            </small>
                        </div>
                        ` : ''}
                        
                        <div class="track-difficulty mt-2">
                            <small class="text-muted">Difficulty: </small>
                            <div class="difficulty-level d-inline-block">
                                <span class="difficulty-indicator ${difficulty.class}">${difficulty.text}</span>
                            </div>
                        </div>
                        
                        <div class="track-surface mt-1">
                            <small class="text-muted">
                                <i class="bi bi-road me-1"></i>
                                ${surfaceType}
                            </small>
                        </div>
                        
                        ${trackData.bestTimeToJog ? `
                        <div class="track-timing mt-1">
                            <small class="text-muted">
                                <i class="bi bi-clock-history me-1"></i>
                                Best time: ${trackData.bestTimeToJog}
                            </small>
                        </div>
                        ` : ''}
                        
                        ${amenities.length > 0 ? `
                        <div class="track-amenities mt-2">
                            <small class="text-muted d-block mb-1">Amenities:</small>
                            <div class="amenities-list">
                                ${amenities.map(amenity => `<small class="text-info me-2">${amenity}</small>`).join('')}
                            </div>
                        </div>
                        ` : ''}
                        
                        ${trackData.safetyNotes ? `
                        <div class="track-safety mt-2">
                            <small class="text-muted">
                                <i class="bi bi-shield-check me-1"></i>
                                ${trackData.safetyNotes}
                            </small>
                        </div>
                        ` : ''}
                    </div>
                    
                    <div class="tooltip-footer">
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">
                                <i class="bi bi-people me-1"></i>
                                Public track
                            </small>
                            <div class="track-actions">
                                ${firstLat && firstLng ? `
                                    <button class="btn btn-outline-success btn-sm track-action-btn me-1" onclick="openInGoogleMaps('${firstLat}', '${firstLng}')" title="Open in Google Maps">
                                        <i class="bi bi-geo-alt me-1"></i>Google
                                    </button>
                                    <button class="btn btn-outline-info btn-sm track-action-btn" onclick="openInWaze('${firstLat}', '${firstLng}')" title="Open in Waze">
                                        <i class="bi bi-navigation me-1"></i>Waze
                                    </button>
                                ` : `
                                    <small class="text-primary">
                                        <i class="bi bi-eye me-1"></i>
                                        Track highlighted
                                    </small>
                                `}
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Function to open location in Google Maps
        function openInGoogleMaps(lat, lng) {
            var url = 'https://www.google.com/maps?q=' + lat + ',' + lng + '&ll=' + lat + ',' + lng + '&z=15';
            window.open(url, '_blank');
        }
        
        // Function to open location in Waze
        function openInWaze(lat, lng) {
            var url = 'https://waze.com/ul?ll=' + lat + ',' + lng + '&navigate=yes';
            window.open(url, '_blank');
        }
        
        function showTrackOnMap(trackId, trackName) {
            console.log('showTrackOnMap called with:', trackId, trackName);
            
            try {
                // Check if map is initialized
                if (!map) {
                    console.error('Map not initialized yet');
                    alert('Map is still loading, please try again in a moment');
                    return;
                }

                // Remove previous highlight
                if (currentLayer) {
                    map.removeLayer(currentLayer);
                }

                // Get track data from stored data
                var trackInfo = trackData[trackId];
                if (!trackInfo || !trackInfo.coordinates || !Array.isArray(trackInfo.coordinates) || trackInfo.coordinates.length === 0) {
                    console.error('Invalid track data for track:', trackName);
                    alert('No valid track data found');
                    return;
                }

                var coords = trackInfo.coordinates;
                console.log('Creating polyline with coords:', coords);
                currentLayer = L.polyline(coords, {
                    color: '#dc3545',
                    weight: 6,
                    opacity: 1
                }).addTo(map);

                // Center and fit map to show the track with animation
                console.log('Fitting bounds to track');
                map.fitBounds(currentLayer.getBounds(), {
                    padding: [20, 20],
                    maxZoom: 16,
                    animate: true,
                    duration: 1.0
                });
                
                // Show beautiful popup at track center after animation
                setTimeout(function() {
                    if (currentLayer) {
                        var tooltipContent = generateTooltipContent(trackInfo, trackId);
                        currentLayer.bindPopup(tooltipContent, {
                            maxWidth: 350,
                            className: 'jogging-popup'
                        }).openPopup();
                    }
                }, 500);
            } catch (e) {
                console.error('Error showing track on map:', e);
                alert('Error showing track: ' + e.message);
            }
        }

        // Initialize map when page loads
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(function() {
                console.log('Initializing map...');
                initializeMap();
            }, 100);
        });

        // Function to change map tiles
        function changeMapTile(tileKey) {
            try {
                if (!mapTiles[tileKey]) {
                    console.error('Unknown tile key:', tileKey);
                    return;
                }

                // Remove current tile layer
                if (currentTileLayer) {
                    map.removeLayer(currentTileLayer);
                }

                // Add new tile layer
                var tileConfig = mapTiles[tileKey];
                currentTileLayer = L.tileLayer(tileConfig.url, {
                    attribution: tileConfig.attribution
                }).addTo(map);

                console.log('Changed map tile to:', tileKey);
            } catch (e) {
                console.error('Error changing map tile:', e);
                alert('Error changing map style: ' + e.message);
            }
        }

        // Tooltip Gallery Modal Variables
        let tooltipGalleryCurrentTrackId = null;
        let tooltipGalleryCurrentIndex = 0;
        let tooltipGalleryMediaFiles = [];

        // Function to open tooltip gallery modal
        function openTooltipGallery(trackId, mediaIndex) {
            const trackInfo = trackData[trackId];
            if (!trackInfo || !trackInfo.mediaFiles || trackInfo.mediaFiles.length === 0) {
                return;
            }

            tooltipGalleryCurrentTrackId = trackId;
            tooltipGalleryCurrentIndex = parseInt(mediaIndex) || 0;
            tooltipGalleryMediaFiles = trackInfo.mediaFiles;

            // Update modal title
            document.getElementById('tooltipGalleryTitle').textContent = trackInfo.name;
            document.getElementById('tooltipGalleryRegion').textContent = trackInfo.region;

            // Show the modal
            document.getElementById('tooltipGalleryModal').style.display = 'flex';
            document.body.style.overflow = 'hidden';

            // Display current media
            displayTooltipGalleryMedia();

            // Add keyboard event listener
            document.addEventListener('keydown', handleTooltipGalleryKeydown);
        }

        // Function to close tooltip gallery modal
        function closeTooltipGallery() {
            document.getElementById('tooltipGalleryModal').style.display = 'none';
            document.body.style.overflow = 'auto';
            
            // Remove keyboard event listener
            document.removeEventListener('keydown', handleTooltipGalleryKeydown);
            
            tooltipGalleryCurrentTrackId = null;
            tooltipGalleryCurrentIndex = 0;
            tooltipGalleryMediaFiles = [];
        }

        // Function to navigate tooltip gallery
        function navigateTooltipGallery(direction) {
            if (!tooltipGalleryMediaFiles || tooltipGalleryMediaFiles.length === 0) return;

            tooltipGalleryCurrentIndex += direction;

            // Wrap around
            if (tooltipGalleryCurrentIndex < 0) {
                tooltipGalleryCurrentIndex = tooltipGalleryMediaFiles.length - 1;
            } else if (tooltipGalleryCurrentIndex >= tooltipGalleryMediaFiles.length) {
                tooltipGalleryCurrentIndex = 0;
            }

            displayTooltipGalleryMedia();
        }

        // Function to display current media in tooltip gallery
        function displayTooltipGalleryMedia() {
            if (!tooltipGalleryMediaFiles || tooltipGalleryMediaFiles.length === 0) return;

            const currentMedia = tooltipGalleryMediaFiles[tooltipGalleryCurrentIndex];
            const mediaContainer = document.getElementById('tooltipGalleryMedia');
            const counterElement = document.getElementById('tooltipGalleryCounter');

            // Update counter
            counterElement.textContent = `${tooltipGalleryCurrentIndex + 1} / ${tooltipGalleryMediaFiles.length}`;

            // Display media
            if (currentMedia.mediaType === 1) { // Video
                mediaContainer.innerHTML = `
                    <video src="${currentMedia.filePath}" class="gallery-media-item" controls autoplay muted>
                        Your browser does not support the video tag.
                    </video>
                `;
            } else { // Image
                mediaContainer.innerHTML = `
                    <img src="${currentMedia.filePath}" alt="Track photo" class="gallery-media-item" />
                `;
            }

            // Show/hide navigation buttons
            const prevBtn = document.querySelector('.gallery-nav-prev');
            const nextBtn = document.querySelector('.gallery-nav-next');
            
            if (tooltipGalleryMediaFiles.length <= 1) {
                prevBtn.style.display = 'none';
                nextBtn.style.display = 'none';
            } else {
                prevBtn.style.display = 'flex';
                nextBtn.style.display = 'flex';
            }
        }

        // Function to handle keyboard navigation
        function handleTooltipGalleryKeydown(event) {
            switch(event.key) {
                case 'Escape':
                    closeTooltipGallery();
                    break;
                case 'ArrowLeft':
                    navigateTooltipGallery(-1);
                    break;
                case 'ArrowRight':
                    navigateTooltipGallery(1);
                    break;
            }
        }

        // Add click event listener for clickable media in tooltips
        document.addEventListener('click', function(event) {
            if (event.target.classList.contains('clickable-media')) {
                const trackId = event.target.getAttribute('data-track-id');
                const mediaIndex = event.target.getAttribute('data-media-index');
                
                if (trackId && mediaIndex !== null) {
                    openTooltipGallery(parseInt(trackId), parseInt(mediaIndex));
                }
            }
        });

        // Make functions globally accessible
        window.showTrackOnMap = showTrackOnMap;
        window.changeMapTile = changeMapTile;
        window.openTooltipGallery = openTooltipGallery;
        window.closeTooltipGallery = closeTooltipGallery;
        window.navigateTooltipGallery = navigateTooltipGallery;
    </script>
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        .jogging-tooltip {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            border: 1px solid rgba(0,0,0,0.1);
            padding: 0;
            min-width: 280px;
            max-width: 320px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        .tooltip-header {
            padding: 12px 16px;
            border-bottom: 1px solid rgba(0,0,0,0.05);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .track-icon {
            font-size: 18px;
        }

        .track-title {
            flex: 1;
        }

        .track-name {
            font-size: 14px;
            color: #1a1a1a;
            line-height: 1.2;
        }

        .track-region {
            font-size: 11px;
            color: #666;
        }

        .track-badge .badge {
            font-size: 10px;
            padding: 4px 8px;
        }

        .tooltip-body {
            padding: 12px 16px;
        }

        .track-stats .stat-item {
            text-align: center;
            padding: 8px 4px;
            border-radius: 6px;
            background: rgba(0,0,0,0.02);
        }

        .stat-item i {
            font-size: 16px;
            margin-bottom: 2px;
        }

        .stat-item small {
            font-size: 10px;
            color: #666;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stat-item strong {
            font-size: 12px;
            color: #1a1a1a;
        }

        .track-description {
            background: rgba(0,0,0,0.02);
            padding: 8px 12px;
            border-radius: 6px;
        }

        .difficulty-indicator {
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .difficulty-easy {
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
        }

        .difficulty-moderate {
            background: rgba(251, 191, 36, 0.1);
            color: #d97706;
        }

        .difficulty-hard {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
        }

        .track-surface {
            font-size: 11px;
        }

        .tooltip-footer {
            padding: 12px 16px;
            background: rgba(0,0,0,0.02);
            border-top: 1px solid rgba(0,0,0,0.05);
            border-radius: 0 0 12px 12px;
        }

        /* Leaflet popup customization */
        .leaflet-popup-content-wrapper {
            border-radius: 12px;
            padding: 0;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }

        .leaflet-popup-content {
            margin: 0;
            line-height: 1.4;
        }

        .leaflet-popup-tip {
            background: white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        }

        .jogging-popup .leaflet-popup-close-button {
            color: #666;
            font-size: 18px;
            padding: 8px;
            top: 8px;
            right: 8px;
        }

        /* Google Maps-style Media Grid */
        .track-media-preview {
            border-radius: 8px;
            overflow: hidden;
            max-height: 120px;
        }

        .media-grid-tooltip {
            height: 120px;
            border-radius: 8px;
            overflow: hidden;
        }

        .media-thumb {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 4px;
            cursor: pointer;
            transition: transform 0.2s ease;
        }

        .media-thumb:hover {
            transform: scale(1.05);
        }

        /* Single image layout */
        .media-single {
            height: 120px;
            width: 100%;
        }

        /* Two images layout */
        .media-row {
            display: flex;
            gap: 2px;
            height: 120px;
        }

        .media-item-half {
            flex: 1;
            height: 100%;
        }

        /* Three images layout */
        .media-item-left {
            flex: 2;
            height: 100%;
        }

        .media-stack-right {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 2px;
            height: 100%;
        }

        .media-item-stack {
            flex: 1;
            overflow: hidden;
            border-radius: 4px;
        }

        /* Four or more images layout */
        .media-grid-4 {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            gap: 2px;
            height: 120px;
        }

        .media-item-quarter {
            position: relative;
            overflow: hidden;
            border-radius: 4px;
        }

        .media-item-quarter.has-overlay {
            position: relative;
        }

        .media-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.6);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 18px;
            border-radius: 4px;
        }

        .media-overlay:hover {
            background: rgba(0, 0, 0, 0.8);
        }

        /* Mobile responsive adjustments */
        @@media (max-width: 480px) {
            .media-grid-tooltip {
                height: 100px;
            }
            
            .track-media-preview {
                max-height: 100px;
            }
            
            .media-single,
            .media-row,
            .media-grid-4 {
                height: 100px;
            }
            
            .media-overlay {
                font-size: 16px;
            }
        }

        /* Tooltip Gallery Modal Styles */
        .gallery-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 10000;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease;
        }

        .gallery-backdrop {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            cursor: pointer;
        }

        .gallery-container {
            position: relative;
            max-width: 90vw;
            max-height: 90vh;
            display: flex;
            flex-direction: column;
            z-index: 10001;
        }

        .gallery-close {
            position: absolute;
            top: -50px;
            right: 0;
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 10px;
            border-radius: 50%;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s ease;
            z-index: 10002;
        }

        .gallery-close:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .gallery-content {
            position: relative;
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .gallery-media-container {
            position: relative;
            max-width: 80vw;
            max-height: 80vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .gallery-media {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 400px;
        }

        .gallery-media-item {
            max-width: 100%;
            max-height: 80vh;
            width: auto;
            height: auto;
            object-fit: contain;
            border-radius: 8px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
        }

        .gallery-counter {
            position: absolute;
            bottom: -40px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 500;
        }

        .gallery-nav {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 20px;
            transition: all 0.2s ease;
            backdrop-filter: blur(10px);
        }

        .gallery-nav:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        .gallery-nav:active {
            transform: scale(0.95);
        }

        .gallery-nav-prev {
            margin-left: -25px;
        }

        .gallery-nav-next {
            margin-right: -25px;
        }

        .gallery-info {
            margin-top: 20px;
            text-align: center;
            color: white;
        }

        .gallery-title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 4px;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: scale(0.9);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }

        /* Mobile responsive adjustments for gallery */
        @@media (max-width: 768px) {
            .gallery-container {
                max-width: 95vw;
                max-height: 95vh;
            }

            .gallery-media-container {
                max-width: 90vw;
                max-height: 70vh;
            }

            .gallery-nav {
                width: 40px;
                height: 40px;
                font-size: 16px;
            }

            .gallery-close {
                top: -40px;
                right: -10px;
                width: 36px;
                height: 36px;
                font-size: 20px;
            }

            .gallery-counter {
                bottom: -30px;
                font-size: 12px;
                padding: 6px 12px;
            }

            .gallery-info {
                margin-top: 15px;
            }

            .gallery-title {
                font-size: 16px;
            }
        }
    </style>
}