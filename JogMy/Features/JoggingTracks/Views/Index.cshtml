@model IEnumerable<JogMy.Models.JoggingTrack>

@{
    ViewData["Title"] = "Jogging Tracks";
}

<div class="mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h2 class="mb-1">
                <i class="bi bi-map text-primary me-2"></i>Jogging Tracks
            </h2>
            <p class="text-muted mb-0">Discover amazing jogging routes in KL and Selangor</p>
        </div>
        @if (User.IsInRole("Admin"))
        {
            <a asp-controller="Admin" asp-action="CreateTrack" class="btn btn-outline-primary">
                <i class="bi bi-plus-circle me-2"></i>Add Track
            </a>
        }
    </div>
</div>

<div class="row g-3">
    <div class="col-lg-8">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="bi bi-geo-alt me-2"></i>Interactive Map
                </h5>
            </div>
            <div class="card-body p-0">
                <div id="map" style="height: 500px; width: 100%;"></div>
            </div>
            <div class="card-footer bg-light">
                <div class="row align-items-center">
                    <div class="col-auto">
                        <label for="mapTileSelect" class="form-label mb-0">
                            <i class="bi bi-layers me-1"></i>Map Style:
                        </label>
                    </div>
                    <div class="col-auto">
                        <select id="mapTileSelect" class="form-select form-select-sm" onchange="changeMapTile(this.value)">
                            <option value="openstreetmap">OpenStreetMap</option>
                            <option value="cartodb-positron">CartoDB Positron</option>
                            <option value="cartodb-darkmatter">CartoDB Dark Matter</option>
                            <option value="cartodb-voyager">CartoDB Voyager</option>
                            <option value="stamen-terrain">Stamen Terrain</option>
                            <option value="stamen-toner">Stamen Toner</option>
                            <option value="stamen-watercolor">Stamen Watercolor</option>
                            <option value="esri-worldstreetmap">ESRI World Street Map</option>
                            <option value="esri-worldtopographic">ESRI World Topographic</option>
                            <option value="esri-worldimagery">ESRI World Imagery</option>
                            <option value="wikimedia">Wikimedia</option>
                            <option value="opentopomap">OpenTopoMap</option>
                        </select>
                    </div>
                    <div class="col">
                        <small class="text-muted">Choose your preferred map style</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">
                    <i class="bi bi-list-ul me-2"></i>Available Tracks
                    @if (Model.Any())
                    {
                        <span class="badge bg-primary ms-2">@Model.Count()</span>
                    }
                </h5>
            </div>
            <div class="card-body p-0" style="max-height: 400px; overflow-y: auto;">
                @if (Model.Any())
                {
                    <div class="list-group list-group-flush">
                        @foreach (var track in Model)
                        {
                            <div class="list-group-item list-group-item-action">
                                <div class="d-flex w-100 justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1 text-primary">@track.Name</h6>
                                        <div class="d-flex align-items-center mb-1">
                                            <i class="bi bi-geo-alt text-muted me-1"></i>
                                            <small class="text-muted">@track.Region</small>
                                            <span class="mx-2 text-muted">â€¢</span>
                                            <i class="bi bi-speedometer text-muted me-1"></i>
                                            <small class="text-muted">@track.Distance km</small>
                                        </div>
                                        @if (!string.IsNullOrEmpty(track.Description))
                                        {
                                            <small class="text-muted d-block mb-2">@track.Description</small>
                                        }
                                        <button class="btn btn-sm btn-outline-primary" onclick="showTrackOnMap(@track.Id, '@track.Name.Replace("'", "\\'")'); return false;">
                                            <i class="bi bi-eye me-1"></i>View on Map
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center p-4">
                        <i class="bi bi-map text-muted" style="font-size: 3rem;"></i>
                        <h6 class="mt-3 text-muted">No tracks available yet</h6>
                        <p class="text-muted small mb-0">Check back soon for new jogging routes!</p>
                    </div>
                }
            </div>
        </div>

        @if (User.Identity.IsAuthenticated)
        {
            <div class="card mt-3 border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="mb-3">
                        <i class="bi bi-person-circle text-success" style="font-size: 2rem;"></i>
                    </div>
                    <h6 class="text-success">Welcome back!</h6>
                    <p class="text-muted small mb-3">@User.Identity.Name</p>
                    <form asp-controller="Account" asp-action="Logout" method="post" class="d-inline">
                        <button type="submit" class="btn btn-outline-secondary btn-sm">
                            <i class="bi bi-box-arrow-right me-1"></i>Logout
                        </button>
                    </form>
                </div>
            </div>
        }
        else
        {
            <div class="card mt-3 border-0 shadow-sm">
                <div class="card-body text-center">
                    <div class="mb-3">
                        <i class="bi bi-people text-primary" style="font-size: 2rem;"></i>
                    </div>
                    <h6 class="text-primary">Join JogMy Community</h6>
                    <p class="text-muted small mb-3">Get access to more features and track your progress</p>
                    <div class="d-grid gap-2">
                        <a asp-controller="Account" asp-action="Login" class="btn btn-primary btn-sm">
                            <i class="bi bi-box-arrow-in-right me-1"></i>Login
                        </a>
                        <a asp-controller="Account" asp-action="Register" class="btn btn-outline-primary btn-sm">
                            <i class="bi bi-person-plus me-1"></i>Register
                        </a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script>
        let map;
        let currentLayer;
        let currentTileLayer;

        // Define available map tiles
        var mapTiles = {
            'openstreetmap': {
                url: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'cartodb-positron': {
                url: 'https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
            },
            'cartodb-darkmatter': {
                url: 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
            },
            'cartodb-voyager': {
                url: 'https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png',
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
            },
            'stamen-terrain': {
                url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.png',
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'stamen-toner': {
                url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.png',
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'stamen-watercolor': {
                url: 'https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.png',
                attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            },
            'esri-worldstreetmap': {
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}',
                attribution: 'Tiles &copy; Esri &mdash; Source: Esri, DeLorme, NAVTEQ, USGS, Intermap, iPC, NRCAN, Esri Japan, METI, Esri China (Hong Kong), Esri (Thailand), TomTom, 2012'
            },
            'esri-worldtopographic': {
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}',
                attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the GIS User Community'
            },
            'esri-worldimagery': {
                url: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}',
                attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community'
            },
            'wikimedia': {
                url: 'https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png',
                attribution: '<a href="https://wikimediafoundation.org/wiki/Maps_Terms_of_Use">Wikimedia</a>'
            },
            'opentopomap': {
                url: 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png',
                attribution: 'Map data: &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, <a href="http://viewfinderpanoramas.org">SRTM</a> | Map style: &copy; <a href="https://opentopomap.org">OpenTopoMap</a> (<a href="https://creativecommons.org/licenses/by-sa/3.0/">CC-BY-SA</a>)'
            }
        };

        // Initialize map
        function initializeMap() {
            try {
                map = L.map('map').setView([3.1319, 101.6841], 11); // Kuala Lumpur center

                // Initialize with OpenStreetMap
                var defaultTile = mapTiles['openstreetmap'];
                currentTileLayer = L.tileLayer(defaultTile.url, {
                    attribution: defaultTile.attribution
                }).addTo(map);

                // Load all tracks on map
                @foreach (var track in Model)
                {
                    <text>
                    try {
                        var coordinates = @Html.Raw(track.Coordinates);
                        if (coordinates && Array.isArray(coordinates)) {
                            // Store track data for later use
                            trackData[@track.Id] = coordinates;
                            
                            var polyline = L.polyline(coordinates, {
                                color: '#007bff',
                                weight: 4,
                                opacity: 0.7
                            }).addTo(map);
                            
                            var trackName = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.Name));
                            var trackRegion = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(track.Region));
                            polyline.bindPopup('<strong>' + trackName + '</strong><br>Distance: @track.Distance km<br>Region: ' + trackRegion);
                        }
                    } catch (e) {
                        console.error('Error loading track @track.Id:', e);
                    }
                    </text>
                }
            } catch (e) {
                console.error('Error initializing map:', e);
            }
        }

        // Store track data for lookup
        var trackData = {};
        
        function showTrackOnMap(trackId, trackName) {
            console.log('showTrackOnMap called with:', trackId, trackName);
            
            try {
                // Check if map is initialized
                if (!map) {
                    console.error('Map not initialized yet');
                    alert('Map is still loading, please try again in a moment');
                    return;
                }

                // Remove previous highlight
                if (currentLayer) {
                    map.removeLayer(currentLayer);
                }

                // Get coordinates from stored track data
                var coords = trackData[trackId];
                if (!coords || !Array.isArray(coords) || coords.length === 0) {
                    console.error('Invalid coordinates for track:', trackName);
                    alert('No valid coordinates found for this track');
                    return;
                }

                console.log('Creating polyline with coords:', coords);
                currentLayer = L.polyline(coords, {
                    color: '#dc3545',
                    weight: 6,
                    opacity: 1
                }).addTo(map);

                // Center and fit map to show the track with animation
                console.log('Fitting bounds to track');
                map.fitBounds(currentLayer.getBounds(), {
                    padding: [20, 20],
                    maxZoom: 16,
                    animate: true,
                    duration: 1.0
                });
                
                // Show popup at track center after animation
                setTimeout(function() {
                    if (currentLayer) {
                        currentLayer.bindPopup('<strong>' + trackName + '</strong><br><small>Track highlighted in red</small>').openPopup();
                    }
                }, 500);
            } catch (e) {
                console.error('Error showing track on map:', e);
                alert('Error showing track: ' + e.message);
            }
        }

        // Initialize map when page loads
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(function() {
                console.log('Initializing map...');
                initializeMap();
            }, 100);
        });

        // Function to change map tiles
        function changeMapTile(tileKey) {
            try {
                if (!mapTiles[tileKey]) {
                    console.error('Unknown tile key:', tileKey);
                    return;
                }

                // Remove current tile layer
                if (currentTileLayer) {
                    map.removeLayer(currentTileLayer);
                }

                // Add new tile layer
                var tileConfig = mapTiles[tileKey];
                currentTileLayer = L.tileLayer(tileConfig.url, {
                    attribution: tileConfig.attribution
                }).addTo(map);

                console.log('Changed map tile to:', tileKey);
            } catch (e) {
                console.error('Error changing map tile:', e);
                alert('Error changing map style: ' + e.message);
            }
        }

        // Make functions globally accessible
        window.showTrackOnMap = showTrackOnMap;
        window.changeMapTile = changeMapTile;
    </script>
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
}